
STM32_Audio_DSP_5_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ac  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800374c  0800374c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003754  08003754  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003754  08003754  00013754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003758  08003758  00013758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800375c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003768  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003768  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007ce0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001901  00000000  00000000  00027d1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f862  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef6  00000000  00000000  00049b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be18d  00000000  00000000  00052a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001950  00000000  00000000  00110be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800371c 	.word	0x0800371c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800371c 	.word	0x0800371c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <IIR_filter_left>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int IIR_filter_left(int inSample)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	float inSampleF = (float) inSample;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	ee07 3a90 	vmov	s15, r3
 80004ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d2:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF = l_b0 * inSampleF + l_b1 * l_in_z1 + l_b2 * l_in_z2 - l_a1 * l_out_z1 - l_a2 * l_out_z2;
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <IIR_filter_left+0xac>)
 80004d8:	ed93 7a00 	vldr	s14, [r3]
 80004dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80004e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <IIR_filter_left+0xb0>)
 80004e6:	edd3 6a00 	vldr	s13, [r3]
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <IIR_filter_left+0xb4>)
 80004ec:	edd3 7a00 	vldr	s15, [r3]
 80004f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <IIR_filter_left+0xb8>)
 80004fa:	edd3 6a00 	vldr	s13, [r3]
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <IIR_filter_left+0xbc>)
 8000500:	edd3 7a00 	vldr	s15, [r3]
 8000504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <IIR_filter_left+0xc0>)
 800050e:	edd3 6a00 	vldr	s13, [r3]
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <IIR_filter_left+0xc4>)
 8000514:	edd3 7a00 	vldr	s15, [r3]
 8000518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800051c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <IIR_filter_left+0xc8>)
 8000522:	edd3 6a00 	vldr	s13, [r3]
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <IIR_filter_left+0xcc>)
 8000528:	edd3 7a00 	vldr	s15, [r3]
 800052c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000534:	edc7 7a02 	vstr	s15, [r7, #8]
	l_in_z2 = l_in_z1;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <IIR_filter_left+0xb4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <IIR_filter_left+0xbc>)
 800053e:	6013      	str	r3, [r2, #0]
	l_in_z1 = inSampleF;
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <IIR_filter_left+0xb4>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6013      	str	r3, [r2, #0]
	l_out_z2 = l_out_z1;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <IIR_filter_left+0xc4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <IIR_filter_left+0xcc>)
 800054c:	6013      	str	r3, [r2, #0]
	l_out_z1 = outSampleF;
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <IIR_filter_left+0xc4>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000554:	edd7 7a02 	vldr	s15, [r7, #8]
 8000558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055c:	ee17 3a90 	vmov	r3, s15
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20000074 	.word	0x20000074
 8000570:	20000048 	.word	0x20000048
 8000574:	2000014c 	.word	0x2000014c
 8000578:	20000028 	.word	0x20000028
 800057c:	2000004c 	.word	0x2000004c
 8000580:	20000050 	.word	0x20000050
 8000584:	2000003c 	.word	0x2000003c
 8000588:	20000030 	.word	0x20000030
 800058c:	20000054 	.word	0x20000054

08000590 <IIR_filter_right>:

int IIR_filter_right(int inSample)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	float inSampleF = (float) inSample;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF = r_b0 * inSampleF + r_b1 * r_in_z1 + r_b2 * r_in_z2 - r_a1 * r_out_z1 - r_a2 * r_out_z2;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <IIR_filter_right+0xac>)
 80005a8:	ed93 7a00 	vldr	s14, [r3]
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <IIR_filter_right+0xb0>)
 80005b6:	edd3 6a00 	vldr	s13, [r3]
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <IIR_filter_right+0xb4>)
 80005bc:	edd3 7a00 	vldr	s15, [r3]
 80005c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <IIR_filter_right+0xb8>)
 80005ca:	edd3 6a00 	vldr	s13, [r3]
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <IIR_filter_right+0xbc>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <IIR_filter_right+0xc0>)
 80005de:	edd3 6a00 	vldr	s13, [r3]
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <IIR_filter_right+0xc4>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <IIR_filter_right+0xc8>)
 80005f2:	edd3 6a00 	vldr	s13, [r3]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <IIR_filter_right+0xcc>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000604:	edc7 7a02 	vstr	s15, [r7, #8]
	r_in_z2 = r_in_z1;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <IIR_filter_right+0xb4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <IIR_filter_right+0xbc>)
 800060e:	6013      	str	r3, [r2, #0]
	r_in_z1 = inSampleF;
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <IIR_filter_right+0xb4>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6013      	str	r3, [r2, #0]
	r_out_z2 = r_out_z1;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <IIR_filter_right+0xc4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <IIR_filter_right+0xcc>)
 800061c:	6013      	str	r3, [r2, #0]
	r_out_z1 = outSampleF;
 800061e:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <IIR_filter_right+0xc4>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000624:	edd7 7a02 	vldr	s15, [r7, #8]
 8000628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800062c:	ee17 3a90 	vmov	r3, s15
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000044 	.word	0x20000044
 8000640:	2000002c 	.word	0x2000002c
 8000644:	2000006c 	.word	0x2000006c
 8000648:	20000070 	.word	0x20000070
 800064c:	20000034 	.word	0x20000034
 8000650:	20000040 	.word	0x20000040
 8000654:	20000058 	.word	0x20000058
 8000658:	20000138 	.word	0x20000138
 800065c:	20000038 	.word	0x20000038

08000660 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (receiveBuffer[0] << 16) | receiveBuffer[1];
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	041b      	lsls	r3, r3, #16
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000670:	8852      	ldrh	r2, [r2, #2]
 8000672:	4313      	orrs	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (receiveBuffer[2] << 16) | receiveBuffer[3];
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 800067e:	88d2      	ldrh	r2, [r2, #6]
 8000680:	4313      	orrs	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample >> 1;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	105b      	asrs	r3, r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
	rSample = rSample >> 1;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	105b      	asrs	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = IIR_filter_left(lSample);
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff0f 	bl	80004c0 <IIR_filter_left>
 80006a2:	60f8      	str	r0, [r7, #12]
	rSample = IIR_filter_right(rSample);
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f7ff ff73 	bl	8000590 <IIR_filter_right>
 80006aa:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	transmitBuffer[0] = (lSample >> 16) & 0xFFFF;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006b4:	801a      	strh	r2, [r3, #0]
	transmitBuffer[1] = lSample & 0xFFFF;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006bc:	805a      	strh	r2, [r3, #2]
	transmitBuffer[2] = (rSample >> 16) & 0xFFFF;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	0c1b      	lsrs	r3, r3, #16
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006c6:	809a      	strh	r2, [r3, #4]
	transmitBuffer[3] = rSample & 0xFFFF;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006ce:	80da      	strh	r2, [r3, #6]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	2000013c 	.word	0x2000013c
 80006dc:	2000005c 	.word	0x2000005c

080006e0 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (receiveBuffer[4] << 16) | receiveBuffer[5];
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006ea:	891b      	ldrh	r3, [r3, #8]
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006f0:	8952      	ldrh	r2, [r2, #10]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (receiveBuffer[6] << 16) | receiveBuffer[7];
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	041b      	lsls	r3, r3, #16
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006fe:	89d2      	ldrh	r2, [r2, #14]
 8000700:	4313      	orrs	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample >> 1;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	105b      	asrs	r3, r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
	rSample = rSample >> 1;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	105b      	asrs	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = IIR_filter_left(lSample);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff fecf 	bl	80004c0 <IIR_filter_left>
 8000722:	60f8      	str	r0, [r7, #12]
	rSample = IIR_filter_right(rSample);
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f7ff ff33 	bl	8000590 <IIR_filter_right>
 800072a:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	transmitBuffer[4] = (lSample >> 16) & 0xFFFF;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000734:	811a      	strh	r2, [r3, #8]
	transmitBuffer[5] = lSample & 0xFFFF;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800073c:	815a      	strh	r2, [r3, #10]
	transmitBuffer[6] = (rSample >> 16) & 0xFFFF;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000746:	819a      	strh	r2, [r3, #12]
	transmitBuffer[7] = rSample & 0xFFFF;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800074e:	81da      	strh	r2, [r3, #14]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000013c 	.word	0x2000013c
 800075c:	2000005c 	.word	0x2000005c

08000760 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000764:	f000 fc5e 	bl	8001024 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000768:	f000 f8aa 	bl	80008c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800076c:	f000 f982 	bl	8000a74 <MX_GPIO_Init>
	MX_DMA_Init();
 8000770:	f000 f958 	bl	8000a24 <MX_DMA_Init>
	MX_I2S2_Init();
 8000774:	f000 f926 	bl	80009c4 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, transmitBuffer, receiveBuffer, 4);
 8000778:	2304      	movs	r3, #4
 800077a:	4a34      	ldr	r2, [pc, #208]	; (800084c <main+0xec>)
 800077c:	4934      	ldr	r1, [pc, #208]	; (8000850 <main+0xf0>)
 800077e:	4835      	ldr	r0, [pc, #212]	; (8000854 <main+0xf4>)
 8000780:	f001 fd64 	bl	800224c <HAL_I2SEx_TransmitReceive_DMA>

	//left-channel, High-Pass, 1kHz, fs=96kHz, 6dB gain
	l_a1 = -1.906833264418934300f;
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <main+0xf8>)
 8000786:	4a35      	ldr	r2, [pc, #212]	; (800085c <main+0xfc>)
 8000788:	601a      	str	r2, [r3, #0]
	l_a2 = 0.910988023112541900f;
 800078a:	4b35      	ldr	r3, [pc, #212]	; (8000860 <main+0x100>)
 800078c:	4a35      	ldr	r2, [pc, #212]	; (8000864 <main+0x104>)
 800078e:	601a      	str	r2, [r3, #0]
	l_b0 = 1.904390807532743590f;
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <main+0x108>)
 8000792:	4a36      	ldr	r2, [pc, #216]	; (800086c <main+0x10c>)
 8000794:	601a      	str	r2, [r3, #0]
	l_b1 = -3.808773325232035050f;
 8000796:	4b36      	ldr	r3, [pc, #216]	; (8000870 <main+0x110>)
 8000798:	4a36      	ldr	r2, [pc, #216]	; (8000874 <main+0x114>)
 800079a:	601a      	str	r2, [r3, #0]
	l_b2 = 1.904390807532743590f;
 800079c:	4b36      	ldr	r3, [pc, #216]	; (8000878 <main+0x118>)
 800079e:	4a33      	ldr	r2, [pc, #204]	; (800086c <main+0x10c>)
 80007a0:	601a      	str	r2, [r3, #0]

	//right-channel, Low-Pass, 1kHz, fs=96 kHz, 6dB gain
	r_a1 = -1.907661506666765700f;
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <main+0x11c>)
 80007a4:	4a36      	ldr	r2, [pc, #216]	; (8000880 <main+0x120>)
 80007a6:	601a      	str	r2, [r3, #0]
	r_a2 = 0.911744272786167320f;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <main+0x124>)
 80007aa:	4a37      	ldr	r2, [pc, #220]	; (8000888 <main+0x128>)
 80007ac:	601a      	str	r2, [r3, #0]
	r_b0 = 0.003941726449675004f;
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <main+0x12c>)
 80007b0:	4a37      	ldr	r2, [pc, #220]	; (8000890 <main+0x130>)
 80007b2:	601a      	str	r2, [r3, #0]
	r_b1 = 0.000262736479523942f;
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <main+0x134>)
 80007b6:	4a38      	ldr	r2, [pc, #224]	; (8000898 <main+0x138>)
 80007b8:	601a      	str	r2, [r3, #0]
	r_b2 = 0.003941726449675004f;
 80007ba:	4b38      	ldr	r3, [pc, #224]	; (800089c <main+0x13c>)
 80007bc:	4a34      	ldr	r2, [pc, #208]	; (8000890 <main+0x130>)
 80007be:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		HAL_Delay(2000);
 80007c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007c4:	f000 fca0 	bl	8001108 <HAL_Delay>
//		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1)
//		{
		//left-channel, High-Pass, 1kHz, fs=96kHz, q=0.7
		//left-channel, High-Pass, 1kHz, fs=96kHz, 6dB gain
		l_a1 = -1.906833264418934300f;
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0xf8>)
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <main+0xfc>)
 80007cc:	601a      	str	r2, [r3, #0]
		l_a2 = 0.910988023112541900f;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <main+0x100>)
 80007d0:	4a24      	ldr	r2, [pc, #144]	; (8000864 <main+0x104>)
 80007d2:	601a      	str	r2, [r3, #0]
		l_b0 = 1.904390807532743590f;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0x108>)
 80007d6:	4a25      	ldr	r2, [pc, #148]	; (800086c <main+0x10c>)
 80007d8:	601a      	str	r2, [r3, #0]
		l_b1 = -3.808773325232035050f;
 80007da:	4b25      	ldr	r3, [pc, #148]	; (8000870 <main+0x110>)
 80007dc:	4a25      	ldr	r2, [pc, #148]	; (8000874 <main+0x114>)
 80007de:	601a      	str	r2, [r3, #0]
		l_b2 = 1.904390807532743590f;
 80007e0:	4b25      	ldr	r3, [pc, #148]	; (8000878 <main+0x118>)
 80007e2:	4a22      	ldr	r2, [pc, #136]	; (800086c <main+0x10c>)
 80007e4:	601a      	str	r2, [r3, #0]

		//right-channel, Low-Pass, 1kHz, fs=96 kHz, 6dB gain
		r_a1 = -1.907661506666765700f;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <main+0x11c>)
 80007e8:	4a25      	ldr	r2, [pc, #148]	; (8000880 <main+0x120>)
 80007ea:	601a      	str	r2, [r3, #0]
		r_a2 = 0.911744272786167320f;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <main+0x124>)
 80007ee:	4a26      	ldr	r2, [pc, #152]	; (8000888 <main+0x128>)
 80007f0:	601a      	str	r2, [r3, #0]
		r_b0 = 0.003941726449675004f;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <main+0x12c>)
 80007f4:	4a26      	ldr	r2, [pc, #152]	; (8000890 <main+0x130>)
 80007f6:	601a      	str	r2, [r3, #0]
		r_b1 = 0.000262736479523942f;
 80007f8:	4b26      	ldr	r3, [pc, #152]	; (8000894 <main+0x134>)
 80007fa:	4a27      	ldr	r2, [pc, #156]	; (8000898 <main+0x138>)
 80007fc:	601a      	str	r2, [r3, #0]
		r_b2 = 0.003941726449675004f;
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <main+0x13c>)
 8000800:	4a23      	ldr	r2, [pc, #140]	; (8000890 <main+0x130>)
 8000802:	601a      	str	r2, [r3, #0]
//		}
//		else
//		{
		HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000808:	f000 fc7e 	bl	8001108 <HAL_Delay>

		//left-channel, High-Pass, 2kHz, fs=96kHz, 6dB gain
		l_a1 = -1.814448746260680870f;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0xf8>)
 800080e:	4a24      	ldr	r2, [pc, #144]	; (80008a0 <main+0x140>)
 8000810:	601a      	str	r2, [r3, #0]
		l_a2 = 0.830272350139270143f;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <main+0x100>)
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <main+0x144>)
 8000816:	601a      	str	r2, [r3, #0]
		l_b0 = 1.818051556114848920f;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <main+0x108>)
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <main+0x148>)
 800081c:	601a      	str	r2, [r3, #0]
		l_b1 = -3.636071539989181640f;
 800081e:	4b14      	ldr	r3, [pc, #80]	; (8000870 <main+0x110>)
 8000820:	4a22      	ldr	r2, [pc, #136]	; (80008ac <main+0x14c>)
 8000822:	601a      	str	r2, [r3, #0]
		l_b2 = 1.818051556114848920f;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <main+0x118>)
 8000826:	4a20      	ldr	r2, [pc, #128]	; (80008a8 <main+0x148>)
 8000828:	601a      	str	r2, [r3, #0]

		//right-channel, Low-Pass, 2kHz, fs=96 kHz, 6dB gain
		r_a1 = -1.816089287935643170f;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <main+0x11c>)
 800082c:	4a20      	ldr	r2, [pc, #128]	; (80008b0 <main+0x150>)
 800082e:	601a      	str	r2, [r3, #0]
		r_a2 = 0.831645104057007201f;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x124>)
 8000832:	4a20      	ldr	r2, [pc, #128]	; (80008b4 <main+0x154>)
 8000834:	601a      	str	r2, [r3, #0]
		r_b0 = 0.009579030163824585f;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x12c>)
 8000838:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <main+0x158>)
 800083a:	601a      	str	r2, [r3, #0]
		r_b1 = 0.011879873357893813f;
 800083c:	4b15      	ldr	r3, [pc, #84]	; (8000894 <main+0x134>)
 800083e:	4a1f      	ldr	r2, [pc, #124]	; (80008bc <main+0x15c>)
 8000840:	601a      	str	r2, [r3, #0]
		r_b2 = 0.009579030163824585f;
 8000842:	4b16      	ldr	r3, [pc, #88]	; (800089c <main+0x13c>)
 8000844:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <main+0x158>)
 8000846:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000);
 8000848:	e7ba      	b.n	80007c0 <main+0x60>
 800084a:	bf00      	nop
 800084c:	2000013c 	.word	0x2000013c
 8000850:	2000005c 	.word	0x2000005c
 8000854:	20000150 	.word	0x20000150
 8000858:	20000050 	.word	0x20000050
 800085c:	bff4131d 	.word	0xbff4131d
 8000860:	20000030 	.word	0x20000030
 8000864:	3f693683 	.word	0x3f693683
 8000868:	20000074 	.word	0x20000074
 800086c:	3ff3c314 	.word	0x3ff3c314
 8000870:	20000048 	.word	0x20000048
 8000874:	c073c2f1 	.word	0xc073c2f1
 8000878:	20000028 	.word	0x20000028
 800087c:	20000040 	.word	0x20000040
 8000880:	bff42e41 	.word	0xbff42e41
 8000884:	20000138 	.word	0x20000138
 8000888:	3f696813 	.word	0x3f696813
 800088c:	20000044 	.word	0x20000044
 8000890:	3b812999 	.word	0x3b812999
 8000894:	2000002c 	.word	0x2000002c
 8000898:	3989bfe5 	.word	0x3989bfe5
 800089c:	20000070 	.word	0x20000070
 80008a0:	bfe83fdb 	.word	0xbfe83fdb
 80008a4:	3f548cbb 	.word	0x3f548cbb
 80008a8:	3fe8b5ea 	.word	0x3fe8b5ea
 80008ac:	c068b565 	.word	0xc068b565
 80008b0:	bfe8759d 	.word	0xbfe8759d
 80008b4:	3f54e6b2 	.word	0x3f54e6b2
 80008b8:	3c1cf15d 	.word	0x3c1cf15d
 80008bc:	3c42a3cd 	.word	0x3c42a3cd

080008c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b098      	sub	sp, #96	; 0x60
 80008c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80008c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ca:	2230      	movs	r2, #48	; 0x30
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f002 ff1c 	bl	800370c <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
 80008e2:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60bb      	str	r3, [r7, #8]
 80008f6:	4b31      	ldr	r3, [pc, #196]	; (80009bc <SystemClock_Config+0xfc>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008fa:	4a30      	ldr	r2, [pc, #192]	; (80009bc <SystemClock_Config+0xfc>)
 80008fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000900:	6413      	str	r3, [r2, #64]	; 0x40
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <SystemClock_Config+0xfc>)
 8000904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000906:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800090e:	2300      	movs	r3, #0
 8000910:	607b      	str	r3, [r7, #4]
 8000912:	4b2b      	ldr	r3, [pc, #172]	; (80009c0 <SystemClock_Config+0x100>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a2a      	ldr	r2, [pc, #168]	; (80009c0 <SystemClock_Config+0x100>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6013      	str	r3, [r2, #0]
 800091e:	4b28      	ldr	r3, [pc, #160]	; (80009c0 <SystemClock_Config+0x100>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	607b      	str	r3, [r7, #4]
 8000928:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092a:	2301      	movs	r3, #1
 800092c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800092e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000932:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000938:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800093c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800093e:	2308      	movs	r3, #8
 8000940:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000942:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000946:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000948:	2302      	movs	r3, #2
 800094a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800094c:	2307      	movs	r3, #7
 800094e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000954:	4618      	mov	r0, r3
 8000956:	f002 f93d 	bl	8002bd4 <HAL_RCC_OscConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000960:	f000 f9d0 	bl	8000d04 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000964:	230f      	movs	r3, #15
 8000966:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000970:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800097a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	2105      	movs	r1, #5
 8000982:	4618      	mov	r0, r3
 8000984:	f002 fb96 	bl	80030b4 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800098e:	f000 f9b9 	bl	8000d04 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000992:	2301      	movs	r3, #1
 8000994:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000996:	23c0      	movs	r3, #192	; 0xc0
 8000998:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800099a:	2302      	movs	r3, #2
 800099c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800099e:	f107 030c 	add.w	r3, r7, #12
 80009a2:	4618      	mov	r0, r3
 80009a4:	f002 fd4e 	bl	8003444 <HAL_RCCEx_PeriphCLKConfig>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 80009ae:	f000 f9a9 	bl	8000d04 <Error_Handler>
	}
}
 80009b2:	bf00      	nop
 80009b4:	3760      	adds	r7, #96	; 0x60
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40007000 	.word	0x40007000

080009c4 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80009c8:	4b13      	ldr	r3, [pc, #76]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009ca:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <MX_I2S2_Init+0x58>)
 80009cc:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009ce:	4b12      	ldr	r3, [pc, #72]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d4:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009d6:	4b10      	ldr	r3, [pc, #64]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009d8:	2200      	movs	r2, #0
 80009da:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009de:	2203      	movs	r2, #3
 80009e0:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009e2:	4b0d      	ldr	r3, [pc, #52]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e8:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009ec:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <MX_I2S2_Init+0x5c>)
 80009ee:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009f0:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <MX_I2S2_Init+0x54>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	; (8000a18 <MX_I2S2_Init+0x54>)
 8000a04:	f001 f9dc 	bl	8001dc0 <HAL_I2S_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 8000a0e:	f000 f979 	bl	8000d04 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000150 	.word	0x20000150
 8000a1c:	40003800 	.word	0x40003800
 8000a20:	00017700 	.word	0x00017700

08000a24 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	4a0f      	ldr	r2, [pc, #60]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a38:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	; (8000a70 <MX_DMA_Init+0x4c>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200e      	movs	r0, #14
 8000a4c:	f000 fc5b 	bl	8001306 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a50:	200e      	movs	r0, #14
 8000a52:	f000 fc74 	bl	800133e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2100      	movs	r1, #0
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 fc53 	bl	8001306 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a60:	200f      	movs	r0, #15
 8000a62:	f000 fc6c 	bl	800133e <HAL_NVIC_EnableIRQ>

}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08c      	sub	sp, #48	; 0x30
 8000a78:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000a7a:	f107 031c 	add.w	r3, r7, #28
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61bb      	str	r3, [r7, #24]
 8000a8e:	4b96      	ldr	r3, [pc, #600]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a95      	ldr	r2, [pc, #596]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000a94:	f043 0310 	orr.w	r3, r3, #16
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b93      	ldr	r3, [pc, #588]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	61bb      	str	r3, [r7, #24]
 8000aa4:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	4b8f      	ldr	r3, [pc, #572]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a8e      	ldr	r2, [pc, #568]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b8c      	ldr	r3, [pc, #560]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0304 	and.w	r3, r3, #4
 8000abe:	617b      	str	r3, [r7, #20]
 8000ac0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
 8000ac6:	4b88      	ldr	r3, [pc, #544]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a87      	ldr	r2, [pc, #540]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b85      	ldr	r3, [pc, #532]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60fb      	str	r3, [r7, #12]
 8000ae2:	4b81      	ldr	r3, [pc, #516]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a80      	ldr	r2, [pc, #512]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b7e      	ldr	r3, [pc, #504]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	4b7a      	ldr	r3, [pc, #488]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a79      	ldr	r2, [pc, #484]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b77      	ldr	r3, [pc, #476]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b73      	ldr	r3, [pc, #460]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a72      	ldr	r2, [pc, #456]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b20:	f043 0308 	orr.w	r3, r3, #8
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b70      	ldr	r3, [pc, #448]	; (8000ce8 <MX_GPIO_Init+0x274>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0308 	and.w	r3, r3, #8
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	2108      	movs	r1, #8
 8000b36:	486d      	ldr	r0, [pc, #436]	; (8000cec <MX_GPIO_Init+0x278>)
 8000b38:	f001 f928 	bl	8001d8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2101      	movs	r1, #1
 8000b40:	486b      	ldr	r0, [pc, #428]	; (8000cf0 <MX_GPIO_Init+0x27c>)
 8000b42:	f001 f923 	bl	8001d8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000b46:	2200      	movs	r2, #0
 8000b48:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b4c:	4869      	ldr	r0, [pc, #420]	; (8000cf4 <MX_GPIO_Init+0x280>)
 8000b4e:	f001 f91d 	bl	8001d8c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b52:	2308      	movs	r3, #8
 8000b54:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	4860      	ldr	r0, [pc, #384]	; (8000cec <MX_GPIO_Init+0x278>)
 8000b6a:	f000 ff73 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b7e:	f107 031c 	add.w	r3, r7, #28
 8000b82:	4619      	mov	r1, r3
 8000b84:	485a      	ldr	r0, [pc, #360]	; (8000cf0 <MX_GPIO_Init+0x27c>)
 8000b86:	f000 ff65 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b8e:	4b5a      	ldr	r3, [pc, #360]	; (8000cf8 <MX_GPIO_Init+0x284>)
 8000b90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4857      	ldr	r0, [pc, #348]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000b9e:	f000 ff59 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8000ba2:	230a      	movs	r3, #10
 8000ba4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000baa:	2300      	movs	r3, #0
 8000bac:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4851      	ldr	r0, [pc, #324]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000bb6:	f000 ff4d 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bca:	2306      	movs	r3, #6
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4849      	ldr	r0, [pc, #292]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000bd6:	f000 ff3d 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000bda:	23e0      	movs	r3, #224	; 0xe0
 8000bdc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bea:	2305      	movs	r3, #5
 8000bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4841      	ldr	r0, [pc, #260]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000bf6:	f000 ff2d 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 031c 	add.w	r3, r7, #28
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	483c      	ldr	r0, [pc, #240]	; (8000d00 <MX_GPIO_Init+0x28c>)
 8000c0e:	f000 ff21 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000c12:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c16:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	4832      	ldr	r0, [pc, #200]	; (8000cf4 <MX_GPIO_Init+0x280>)
 8000c2c:	f000 ff12 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000c30:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c36:	2302      	movs	r3, #2
 8000c38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c42:	2306      	movs	r3, #6
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c46:	f107 031c 	add.w	r3, r7, #28
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4828      	ldr	r0, [pc, #160]	; (8000cf0 <MX_GPIO_Init+0x27c>)
 8000c4e:	f000 ff01 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	4825      	ldr	r0, [pc, #148]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000c68:	f000 fef4 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8000c6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c70:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	2302      	movs	r3, #2
 8000c74:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c82:	f107 031c 	add.w	r3, r7, #28
 8000c86:	4619      	mov	r1, r3
 8000c88:	481c      	ldr	r0, [pc, #112]	; (8000cfc <MX_GPIO_Init+0x288>)
 8000c8a:	f000 fee3 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c8e:	2320      	movs	r3, #32
 8000c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 031c 	add.w	r3, r7, #28
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4814      	ldr	r0, [pc, #80]	; (8000cf4 <MX_GPIO_Init+0x280>)
 8000ca2:	f000 fed7 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000ca6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000caa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cac:	2312      	movs	r3, #18
 8000cae:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cb8:	2304      	movs	r3, #4
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480f      	ldr	r0, [pc, #60]	; (8000d00 <MX_GPIO_Init+0x28c>)
 8000cc4:	f000 fec6 	bl	8001a54 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	; (8000cf8 <MX_GPIO_Init+0x284>)
 8000cce:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4804      	ldr	r0, [pc, #16]	; (8000cec <MX_GPIO_Init+0x278>)
 8000cdc:	f000 feba 	bl	8001a54 <HAL_GPIO_Init>

}
 8000ce0:	bf00      	nop
 8000ce2:	3730      	adds	r7, #48	; 0x30
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40021000 	.word	0x40021000
 8000cf0:	40020800 	.word	0x40020800
 8000cf4:	40020c00 	.word	0x40020c00
 8000cf8:	10120000 	.word	0x10120000
 8000cfc:	40020000 	.word	0x40020000
 8000d00:	40020400 	.word	0x40020400

08000d04 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a0f      	ldr	r2, [pc, #60]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	603b      	str	r3, [r7, #0]
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6413      	str	r3, [r2, #64]	; 0x40
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x4c>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d4e:	2007      	movs	r0, #7
 8000d50:	f000 face 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40023800 	.word	0x40023800

08000d60 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a62      	ldr	r2, [pc, #392]	; (8000f08 <HAL_I2S_MspInit+0x1a8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	f040 80be 	bne.w	8000f00 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	4b60      	ldr	r3, [pc, #384]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a5f      	ldr	r2, [pc, #380]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000d8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b5d      	ldr	r3, [pc, #372]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b59      	ldr	r3, [pc, #356]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a58      	ldr	r2, [pc, #352]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000daa:	f043 0304 	orr.w	r3, r3, #4
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b56      	ldr	r3, [pc, #344]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 0304 	and.w	r3, r3, #4
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b52      	ldr	r3, [pc, #328]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a51      	ldr	r2, [pc, #324]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000dc6:	f043 0302 	orr.w	r3, r3, #2
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	; (8000f0c <HAL_I2S_MspInit+0x1ac>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dd8:	2304      	movs	r3, #4
 8000dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de4:	2303      	movs	r3, #3
 8000de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000de8:	2306      	movs	r3, #6
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	4847      	ldr	r0, [pc, #284]	; (8000f10 <HAL_I2S_MspInit+0x1b0>)
 8000df4:	f000 fe2e 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000df8:	2348      	movs	r3, #72	; 0x48
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e08:	2305      	movs	r3, #5
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	483f      	ldr	r0, [pc, #252]	; (8000f10 <HAL_I2S_MspInit+0x1b0>)
 8000e14:	f000 fe1e 	bl	8001a54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e18:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e2a:	2305      	movs	r3, #5
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4837      	ldr	r0, [pc, #220]	; (8000f14 <HAL_I2S_MspInit+0x1b4>)
 8000e36:	f000 fe0d 	bl	8001a54 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000e3a:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e3c:	4a37      	ldr	r2, [pc, #220]	; (8000f1c <HAL_I2S_MspInit+0x1bc>)
 8000e3e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e40:	4b35      	ldr	r3, [pc, #212]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e42:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e46:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e48:	4b33      	ldr	r3, [pc, #204]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4e:	4b32      	ldr	r3, [pc, #200]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e54:	4b30      	ldr	r3, [pc, #192]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e62:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e64:	4b2c      	ldr	r3, [pc, #176]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e74:	4b28      	ldr	r3, [pc, #160]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e7a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e7c:	4b26      	ldr	r3, [pc, #152]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000e82:	4825      	ldr	r0, [pc, #148]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e84:	f000 fa76 	bl	8001374 <HAL_DMA_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8000e8e:	f7ff ff39 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a20      	ldr	r2, [pc, #128]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e98:	4a1f      	ldr	r2, [pc, #124]	; (8000f18 <HAL_I2S_MspInit+0x1b8>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e9e:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ea0:	4a20      	ldr	r2, [pc, #128]	; (8000f24 <HAL_I2S_MspInit+0x1c4>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000eac:	2240      	movs	r2, #64	; 0x40
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000eb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ebc:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ec4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ecc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ece:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ed0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ed4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ed8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000edc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ede:	4b10      	ldr	r3, [pc, #64]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ee4:	480e      	ldr	r0, [pc, #56]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ee6:	f000 fa45 	bl	8001374 <HAL_DMA_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8000ef0:	f7ff ff08 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	4a0a      	ldr	r2, [pc, #40]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_I2S_MspInit+0x1c0>)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40003800 	.word	0x40003800
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020400 	.word	0x40020400
 8000f18:	20000078 	.word	0x20000078
 8000f1c:	40026058 	.word	0x40026058
 8000f20:	200000d8 	.word	0x200000d8
 8000f24:	40026070 	.word	0x40026070

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f8a8 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <DMA1_Stream3_IRQHandler+0x10>)
 8000f82:	f000 fafd 	bl	8001580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000078 	.word	0x20000078

08000f90 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <DMA1_Stream4_IRQHandler+0x10>)
 8000f96:	f000 faf3 	bl	8001580 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	200000d8 	.word	0x200000d8

08000fa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <SystemInit+0x28>)
 8000faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fae:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <SystemInit+0x28>)
 8000fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fb8:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SystemInit+0x28>)
 8000fba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fbe:	609a      	str	r2, [r3, #8]
#endif
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fd4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fd6:	e003      	b.n	8000fe0 <LoopCopyDataInit>

08000fd8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fdc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fde:	3104      	adds	r1, #4

08000fe0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fe0:	480b      	ldr	r0, [pc, #44]	; (8001010 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fe4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fe8:	d3f6      	bcc.n	8000fd8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fec:	e002      	b.n	8000ff4 <LoopFillZerobss>

08000fee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ff0:	f842 3b04 	str.w	r3, [r2], #4

08000ff4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ff6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ff8:	d3f9      	bcc.n	8000fee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd3 	bl	8000fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f002 fb61 	bl	80036c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fbad 	bl	8000760 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800100c:	0800375c 	.word	0x0800375c
  ldr  r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001014:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001018:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800101c:	2000019c 	.word	0x2000019c

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f94f 	bl	80012f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe5a 	bl	8000d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f967 	bl	800135a <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295
 80010a4:	f000 f92f 	bl	8001306 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000000 	.word	0x20000000
 80010c0:	20000008 	.word	0x20000008
 80010c4:	20000004 	.word	0x20000004

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000008 	.word	0x20000008
 80010ec:	20000198 	.word	0x20000198

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000198 	.word	0x20000198

08001108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001110:	f7ff ffee 	bl	80010f0 <HAL_GetTick>
 8001114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001120:	d005      	beq.n	800112e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_Delay+0x44>)
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	461a      	mov	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800112e:	bf00      	nop
 8001130:	f7ff ffde 	bl	80010f0 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	429a      	cmp	r2, r3
 800113e:	d8f7      	bhi.n	8001130 <HAL_Delay+0x28>
  {
  }
}
 8001140:	bf00      	nop
 8001142:	bf00      	nop
 8001144:	3710      	adds	r7, #16
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000008 	.word	0x20000008

08001150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001160:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800116c:	4013      	ands	r3, r2
 800116e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800117c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001182:	4a04      	ldr	r2, [pc, #16]	; (8001194 <__NVIC_SetPriorityGrouping+0x44>)
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	60d3      	str	r3, [r2, #12]
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <__NVIC_GetPriorityGrouping+0x18>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	0a1b      	lsrs	r3, r3, #8
 80011a2:	f003 0307 	and.w	r3, r3, #7
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	db0b      	blt.n	80011de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 021f 	and.w	r2, r3, #31
 80011cc:	4907      	ldr	r1, [pc, #28]	; (80011ec <__NVIC_EnableIRQ+0x38>)
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	095b      	lsrs	r3, r3, #5
 80011d4:	2001      	movs	r0, #1
 80011d6:	fa00 f202 	lsl.w	r2, r0, r2
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	e000e100 	.word	0xe000e100

080011f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001200:	2b00      	cmp	r3, #0
 8001202:	db0a      	blt.n	800121a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	b2da      	uxtb	r2, r3
 8001208:	490c      	ldr	r1, [pc, #48]	; (800123c <__NVIC_SetPriority+0x4c>)
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	0112      	lsls	r2, r2, #4
 8001210:	b2d2      	uxtb	r2, r2
 8001212:	440b      	add	r3, r1
 8001214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001218:	e00a      	b.n	8001230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4908      	ldr	r1, [pc, #32]	; (8001240 <__NVIC_SetPriority+0x50>)
 8001220:	79fb      	ldrb	r3, [r7, #7]
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	3b04      	subs	r3, #4
 8001228:	0112      	lsls	r2, r2, #4
 800122a:	b2d2      	uxtb	r2, r2
 800122c:	440b      	add	r3, r1
 800122e:	761a      	strb	r2, [r3, #24]
}
 8001230:	bf00      	nop
 8001232:	370c      	adds	r7, #12
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr
 800123c:	e000e100 	.word	0xe000e100
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001244:	b480      	push	{r7}
 8001246:	b089      	sub	sp, #36	; 0x24
 8001248:	af00      	add	r7, sp, #0
 800124a:	60f8      	str	r0, [r7, #12]
 800124c:	60b9      	str	r1, [r7, #8]
 800124e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	2b04      	cmp	r3, #4
 8001260:	bf28      	it	cs
 8001262:	2304      	movcs	r3, #4
 8001264:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3304      	adds	r3, #4
 800126a:	2b06      	cmp	r3, #6
 800126c:	d902      	bls.n	8001274 <NVIC_EncodePriority+0x30>
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3b03      	subs	r3, #3
 8001272:	e000      	b.n	8001276 <NVIC_EncodePriority+0x32>
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43da      	mvns	r2, r3
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	401a      	ands	r2, r3
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800128c:	f04f 31ff 	mov.w	r1, #4294967295
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa01 f303 	lsl.w	r3, r1, r3
 8001296:	43d9      	mvns	r1, r3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800129c:	4313      	orrs	r3, r2
         );
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3724      	adds	r7, #36	; 0x24
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012bc:	d301      	bcc.n	80012c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012be:	2301      	movs	r3, #1
 80012c0:	e00f      	b.n	80012e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012c2:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <SysTick_Config+0x40>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ca:	210f      	movs	r1, #15
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f7ff ff8e 	bl	80011f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <SysTick_Config+0x40>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012da:	4b04      	ldr	r3, [pc, #16]	; (80012ec <SysTick_Config+0x40>)
 80012dc:	2207      	movs	r2, #7
 80012de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	e000e010 	.word	0xe000e010

080012f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ff29 	bl	8001150 <__NVIC_SetPriorityGrouping>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001306:	b580      	push	{r7, lr}
 8001308:	b086      	sub	sp, #24
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001314:	2300      	movs	r3, #0
 8001316:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001318:	f7ff ff3e 	bl	8001198 <__NVIC_GetPriorityGrouping>
 800131c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	68b9      	ldr	r1, [r7, #8]
 8001322:	6978      	ldr	r0, [r7, #20]
 8001324:	f7ff ff8e 	bl	8001244 <NVIC_EncodePriority>
 8001328:	4602      	mov	r2, r0
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	4611      	mov	r1, r2
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff5d 	bl	80011f0 <__NVIC_SetPriority>
}
 8001336:	bf00      	nop
 8001338:	3718      	adds	r7, #24
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff ff31 	bl	80011b4 <__NVIC_EnableIRQ>
}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff ffa2 	bl	80012ac <SysTick_Config>
 8001368:	4603      	mov	r3, r0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001380:	f7ff feb6 	bl	80010f0 <HAL_GetTick>
 8001384:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e099      	b.n	80014c4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2200      	movs	r2, #0
 8001394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b0:	e00f      	b.n	80013d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013b2:	f7ff fe9d 	bl	80010f0 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	2b05      	cmp	r3, #5
 80013be:	d908      	bls.n	80013d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2220      	movs	r2, #32
 80013c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2203      	movs	r2, #3
 80013ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e078      	b.n	80014c4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0301 	and.w	r3, r3, #1
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d1e8      	bne.n	80013b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013e8:	697a      	ldr	r2, [r7, #20]
 80013ea:	4b38      	ldr	r3, [pc, #224]	; (80014cc <HAL_DMA_Init+0x158>)
 80013ec:	4013      	ands	r3, r2
 80013ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800140a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a1b      	ldr	r3, [r3, #32]
 800141c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	2b04      	cmp	r3, #4
 800142a:	d107      	bne.n	800143c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4313      	orrs	r3, r2
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4313      	orrs	r3, r2
 800143a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f023 0307 	bic.w	r3, r3, #7
 8001452:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	4313      	orrs	r3, r2
 800145c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	2b04      	cmp	r3, #4
 8001464:	d117      	bne.n	8001496 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800146a:	697a      	ldr	r2, [r7, #20]
 800146c:	4313      	orrs	r3, r2
 800146e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00e      	beq.n	8001496 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fa6f 	bl	800195c <DMA_CheckFifoParam>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d008      	beq.n	8001496 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2240      	movs	r2, #64	; 0x40
 8001488:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2201      	movs	r2, #1
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001492:	2301      	movs	r3, #1
 8001494:	e016      	b.n	80014c4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f000 fa26 	bl	80018f0 <DMA_CalcBaseAndBitshift>
 80014a4:	4603      	mov	r3, r0
 80014a6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ac:	223f      	movs	r2, #63	; 0x3f
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014c2:	2300      	movs	r3, #0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	f010803f 	.word	0xf010803f

080014d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_DMA_Start_IT+0x26>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e040      	b.n	8001578 <HAL_DMA_Start_IT+0xa8>
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b01      	cmp	r3, #1
 8001508:	d12f      	bne.n	800156a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2202      	movs	r2, #2
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2200      	movs	r2, #0
 8001516:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	68f8      	ldr	r0, [r7, #12]
 8001520:	f000 f9b8 	bl	8001894 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001528:	223f      	movs	r2, #63	; 0x3f
 800152a:	409a      	lsls	r2, r3
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f042 0216 	orr.w	r2, r2, #22
 800153e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	2b00      	cmp	r3, #0
 8001546:	d007      	beq.n	8001558 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0208 	orr.w	r2, r2, #8
 8001556:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f042 0201 	orr.w	r2, r2, #1
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	e005      	b.n	8001576 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	2200      	movs	r2, #0
 800156e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001572:	2302      	movs	r3, #2
 8001574:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001576:	7dfb      	ldrb	r3, [r7, #23]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001588:	2300      	movs	r3, #0
 800158a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800158c:	4b92      	ldr	r3, [pc, #584]	; (80017d8 <HAL_DMA_IRQHandler+0x258>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a92      	ldr	r2, [pc, #584]	; (80017dc <HAL_DMA_IRQHandler+0x25c>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	0a9b      	lsrs	r3, r3, #10
 8001598:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015aa:	2208      	movs	r2, #8
 80015ac:	409a      	lsls	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d01a      	beq.n	80015ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d013      	beq.n	80015ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0204 	bic.w	r2, r2, #4
 80015d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d8:	2208      	movs	r2, #8
 80015da:	409a      	lsls	r2, r3
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f0:	2201      	movs	r2, #1
 80015f2:	409a      	lsls	r2, r3
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4013      	ands	r3, r2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d012      	beq.n	8001622 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160e:	2201      	movs	r2, #1
 8001610:	409a      	lsls	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f043 0202 	orr.w	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001626:	2204      	movs	r2, #4
 8001628:	409a      	lsls	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d012      	beq.n	8001658 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00b      	beq.n	8001658 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001644:	2204      	movs	r2, #4
 8001646:	409a      	lsls	r2, r3
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001650:	f043 0204 	orr.w	r2, r3, #4
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165c:	2210      	movs	r2, #16
 800165e:	409a      	lsls	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4013      	ands	r3, r2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d043      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d03c      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800167a:	2210      	movs	r2, #16
 800167c:	409a      	lsls	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d018      	beq.n	80016c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d108      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d024      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
 80016ae:	e01f      	b.n	80016f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d01b      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	4798      	blx	r3
 80016c0:	e016      	b.n	80016f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0208 	bic.w	r2, r2, #8
 80016de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d003      	beq.n	80016f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016f4:	2220      	movs	r2, #32
 80016f6:	409a      	lsls	r2, r3
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 808e 	beq.w	800181e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 8086 	beq.w	800181e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001716:	2220      	movs	r2, #32
 8001718:	409a      	lsls	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b05      	cmp	r3, #5
 8001728:	d136      	bne.n	8001798 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0216 	bic.w	r2, r2, #22
 8001738:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	695a      	ldr	r2, [r3, #20]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001748:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	2b00      	cmp	r3, #0
 8001750:	d103      	bne.n	800175a <HAL_DMA_IRQHandler+0x1da>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 0208 	bic.w	r2, r2, #8
 8001768:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176e:	223f      	movs	r2, #63	; 0x3f
 8001770:	409a      	lsls	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800178a:	2b00      	cmp	r3, #0
 800178c:	d07d      	beq.n	800188a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	4798      	blx	r3
        }
        return;
 8001796:	e078      	b.n	800188a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d01c      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d108      	bne.n	80017c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d030      	beq.n	800181e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e02b      	b.n	800181e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d027      	beq.n	800181e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	4798      	blx	r3
 80017d6:	e022      	b.n	800181e <HAL_DMA_IRQHandler+0x29e>
 80017d8:	20000000 	.word	0x20000000
 80017dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10f      	bne.n	800180e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f022 0210 	bic.w	r2, r2, #16
 80017fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	2b00      	cmp	r3, #0
 8001824:	d032      	beq.n	800188c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b00      	cmp	r3, #0
 8001830:	d022      	beq.n	8001878 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2205      	movs	r2, #5
 8001836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0201 	bic.w	r2, r2, #1
 8001848:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3301      	adds	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	429a      	cmp	r2, r3
 8001854:	d307      	bcc.n	8001866 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0301 	and.w	r3, r3, #1
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f2      	bne.n	800184a <HAL_DMA_IRQHandler+0x2ca>
 8001864:	e000      	b.n	8001868 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001866:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187c:	2b00      	cmp	r3, #0
 800187e:	d005      	beq.n	800188c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e000      	b.n	800188c <HAL_DMA_IRQHandler+0x30c>
        return;
 800188a:	bf00      	nop
    }
  }
}
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop

08001894 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b40      	cmp	r3, #64	; 0x40
 80018c0:	d108      	bne.n	80018d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018d2:	e007      	b.n	80018e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68ba      	ldr	r2, [r7, #8]
 80018da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	60da      	str	r2, [r3, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	3b10      	subs	r3, #16
 8001900:	4a14      	ldr	r2, [pc, #80]	; (8001954 <DMA_CalcBaseAndBitshift+0x64>)
 8001902:	fba2 2303 	umull	r2, r3, r2, r3
 8001906:	091b      	lsrs	r3, r3, #4
 8001908:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800190a:	4a13      	ldr	r2, [pc, #76]	; (8001958 <DMA_CalcBaseAndBitshift+0x68>)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4413      	add	r3, r2
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	461a      	mov	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d909      	bls.n	8001932 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001926:	f023 0303 	bic.w	r3, r3, #3
 800192a:	1d1a      	adds	r2, r3, #4
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	659a      	str	r2, [r3, #88]	; 0x58
 8001930:	e007      	b.n	8001942 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800193a:	f023 0303 	bic.w	r3, r3, #3
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001946:	4618      	mov	r0, r3
 8001948:	3714      	adds	r7, #20
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	aaaaaaab 	.word	0xaaaaaaab
 8001958:	08003744 	.word	0x08003744

0800195c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800196c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	699b      	ldr	r3, [r3, #24]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11f      	bne.n	80019b6 <DMA_CheckFifoParam+0x5a>
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b03      	cmp	r3, #3
 800197a:	d856      	bhi.n	8001a2a <DMA_CheckFifoParam+0xce>
 800197c:	a201      	add	r2, pc, #4	; (adr r2, 8001984 <DMA_CheckFifoParam+0x28>)
 800197e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001982:	bf00      	nop
 8001984:	08001995 	.word	0x08001995
 8001988:	080019a7 	.word	0x080019a7
 800198c:	08001995 	.word	0x08001995
 8001990:	08001a2b 	.word	0x08001a2b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d046      	beq.n	8001a2e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a4:	e043      	b.n	8001a2e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ae:	d140      	bne.n	8001a32 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019b4:	e03d      	b.n	8001a32 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019be:	d121      	bne.n	8001a04 <DMA_CheckFifoParam+0xa8>
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	2b03      	cmp	r3, #3
 80019c4:	d837      	bhi.n	8001a36 <DMA_CheckFifoParam+0xda>
 80019c6:	a201      	add	r2, pc, #4	; (adr r2, 80019cc <DMA_CheckFifoParam+0x70>)
 80019c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019cc:	080019dd 	.word	0x080019dd
 80019d0:	080019e3 	.word	0x080019e3
 80019d4:	080019dd 	.word	0x080019dd
 80019d8:	080019f5 	.word	0x080019f5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
      break;
 80019e0:	e030      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d025      	beq.n	8001a3a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019f2:	e022      	b.n	8001a3a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019fc:	d11f      	bne.n	8001a3e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a02:	e01c      	b.n	8001a3e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	d903      	bls.n	8001a12 <DMA_CheckFifoParam+0xb6>
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2b03      	cmp	r3, #3
 8001a0e:	d003      	beq.n	8001a18 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a10:	e018      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	73fb      	strb	r3, [r7, #15]
      break;
 8001a16:	e015      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00e      	beq.n	8001a42 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	73fb      	strb	r3, [r7, #15]
      break;
 8001a28:	e00b      	b.n	8001a42 <DMA_CheckFifoParam+0xe6>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e00a      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2e:	bf00      	nop
 8001a30:	e008      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
 8001a34:	e006      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;
 8001a36:	bf00      	nop
 8001a38:	e004      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;
 8001a3a:	bf00      	nop
 8001a3c:	e002      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a3e:	bf00      	nop
 8001a40:	e000      	b.n	8001a44 <DMA_CheckFifoParam+0xe8>
      break;
 8001a42:	bf00      	nop
    }
  } 
  
  return status; 
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3714      	adds	r7, #20
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop

08001a54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b089      	sub	sp, #36	; 0x24
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e16b      	b.n	8001d48 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a70:	2201      	movs	r2, #1
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	f040 815a 	bne.w	8001d42 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d00b      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d007      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001aa2:	2b11      	cmp	r3, #17
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	2b12      	cmp	r3, #18
 8001aac:	d130      	bne.n	8001b10 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	2203      	movs	r2, #3
 8001aba:	fa02 f303 	lsl.w	r3, r2, r3
 8001abe:	43db      	mvns	r3, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69ba      	ldr	r2, [r7, #24]
 8001adc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	091b      	lsrs	r3, r3, #4
 8001afa:	f003 0201 	and.w	r2, r3, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	2203      	movs	r2, #3
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	4013      	ands	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69ba      	ldr	r2, [r7, #24]
 8001b3e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d003      	beq.n	8001b50 <HAL_GPIO_Init+0xfc>
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b12      	cmp	r3, #18
 8001b4e:	d123      	bne.n	8001b98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	08da      	lsrs	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3208      	adds	r2, #8
 8001b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	220f      	movs	r2, #15
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	08da      	lsrs	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	3208      	adds	r2, #8
 8001b92:	69b9      	ldr	r1, [r7, #24]
 8001b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	2203      	movs	r2, #3
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0203 	and.w	r2, r3, #3
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 80b4 	beq.w	8001d42 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	4b60      	ldr	r3, [pc, #384]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	4a5f      	ldr	r2, [pc, #380]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001be4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001be8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bea:	4b5d      	ldr	r3, [pc, #372]	; (8001d60 <HAL_GPIO_Init+0x30c>)
 8001bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bf6:	4a5b      	ldr	r2, [pc, #364]	; (8001d64 <HAL_GPIO_Init+0x310>)
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	220f      	movs	r2, #15
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43db      	mvns	r3, r3
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	4013      	ands	r3, r2
 8001c18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a52      	ldr	r2, [pc, #328]	; (8001d68 <HAL_GPIO_Init+0x314>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02b      	beq.n	8001c7a <HAL_GPIO_Init+0x226>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a51      	ldr	r2, [pc, #324]	; (8001d6c <HAL_GPIO_Init+0x318>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d025      	beq.n	8001c76 <HAL_GPIO_Init+0x222>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a50      	ldr	r2, [pc, #320]	; (8001d70 <HAL_GPIO_Init+0x31c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d01f      	beq.n	8001c72 <HAL_GPIO_Init+0x21e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4f      	ldr	r2, [pc, #316]	; (8001d74 <HAL_GPIO_Init+0x320>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d019      	beq.n	8001c6e <HAL_GPIO_Init+0x21a>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4e      	ldr	r2, [pc, #312]	; (8001d78 <HAL_GPIO_Init+0x324>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0x216>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4d      	ldr	r2, [pc, #308]	; (8001d7c <HAL_GPIO_Init+0x328>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d00d      	beq.n	8001c66 <HAL_GPIO_Init+0x212>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	4a4c      	ldr	r2, [pc, #304]	; (8001d80 <HAL_GPIO_Init+0x32c>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d007      	beq.n	8001c62 <HAL_GPIO_Init+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4a4b      	ldr	r2, [pc, #300]	; (8001d84 <HAL_GPIO_Init+0x330>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d101      	bne.n	8001c5e <HAL_GPIO_Init+0x20a>
 8001c5a:	2307      	movs	r3, #7
 8001c5c:	e00e      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c5e:	2308      	movs	r3, #8
 8001c60:	e00c      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c62:	2306      	movs	r3, #6
 8001c64:	e00a      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c66:	2305      	movs	r3, #5
 8001c68:	e008      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c6a:	2304      	movs	r3, #4
 8001c6c:	e006      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e004      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c72:	2302      	movs	r3, #2
 8001c74:	e002      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <HAL_GPIO_Init+0x228>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	69fa      	ldr	r2, [r7, #28]
 8001c7e:	f002 0203 	and.w	r2, r2, #3
 8001c82:	0092      	lsls	r2, r2, #2
 8001c84:	4093      	lsls	r3, r2
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c8c:	4935      	ldr	r1, [pc, #212]	; (8001d64 <HAL_GPIO_Init+0x310>)
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	089b      	lsrs	r3, r3, #2
 8001c92:	3302      	adds	r3, #2
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9a:	4b3b      	ldr	r3, [pc, #236]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca0:	693b      	ldr	r3, [r7, #16]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cbe:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ce8:	4a27      	ldr	r2, [pc, #156]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cee:	4b26      	ldr	r3, [pc, #152]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d18:	4b1b      	ldr	r3, [pc, #108]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d3c:	4a12      	ldr	r2, [pc, #72]	; (8001d88 <HAL_GPIO_Init+0x334>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3301      	adds	r3, #1
 8001d46:	61fb      	str	r3, [r7, #28]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	2b0f      	cmp	r3, #15
 8001d4c:	f67f ae90 	bls.w	8001a70 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3724      	adds	r7, #36	; 0x24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40013800 	.word	0x40013800
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	40020800 	.word	0x40020800
 8001d74:	40020c00 	.word	0x40020c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40021400 	.word	0x40021400
 8001d80:	40021800 	.word	0x40021800
 8001d84:	40021c00 	.word	0x40021c00
 8001d88:	40013c00 	.word	0x40013c00

08001d8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	807b      	strh	r3, [r7, #2]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d9c:	787b      	ldrb	r3, [r7, #1]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001da2:	887a      	ldrh	r2, [r7, #2]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001da8:	e003      	b.n	8001db2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001daa:	887b      	ldrh	r3, [r7, #2]
 8001dac:	041a      	lsls	r2, r3, #16
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	619a      	str	r2, [r3, #24]
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b088      	sub	sp, #32
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e128      	b.n	8002024 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a90      	ldr	r2, [pc, #576]	; (800202c <HAL_I2S_Init+0x26c>)
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7fe ffb7 	bl	8000d60 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	69db      	ldr	r3, [r3, #28]
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6812      	ldr	r2, [r2, #0]
 8001e04:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e08:	f023 030f 	bic.w	r3, r3, #15
 8001e0c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	695b      	ldr	r3, [r3, #20]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d060      	beq.n	8001ee0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e26:	2310      	movs	r3, #16
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e001      	b.n	8001e30 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e2c:	2320      	movs	r3, #32
 8001e2e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	2b20      	cmp	r3, #32
 8001e36:	d802      	bhi.n	8001e3e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e3e:	2001      	movs	r0, #1
 8001e40:	f001 fbe2 	bl	8003608 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e44:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e4e:	d125      	bne.n	8001e9c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d010      	beq.n	8001e7a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	695b      	ldr	r3, [r3, #20]
 8001e70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e74:	3305      	adds	r3, #5
 8001e76:	613b      	str	r3, [r7, #16]
 8001e78:	e01f      	b.n	8001eba <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	68fa      	ldr	r2, [r7, #12]
 8001e80:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e84:	4613      	mov	r3, r2
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	4413      	add	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e96:	3305      	adds	r3, #5
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e00e      	b.n	8001eba <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	3305      	adds	r3, #5
 8001eb8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4a5c      	ldr	r2, [pc, #368]	; (8002030 <HAL_I2S_Init+0x270>)
 8001ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	085b      	lsrs	r3, r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	021b      	lsls	r3, r3, #8
 8001edc:	61bb      	str	r3, [r7, #24]
 8001ede:	e003      	b.n	8001ee8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d902      	bls.n	8001ef4 <HAL_I2S_Init+0x134>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	2bff      	cmp	r3, #255	; 0xff
 8001ef2:	d907      	bls.n	8001f04 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef8:	f043 0210 	orr.w	r2, r3, #16
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e08f      	b.n	8002024 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	ea42 0103 	orr.w	r1, r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	69fa      	ldr	r2, [r7, #28]
 8001f14:	430a      	orrs	r2, r1
 8001f16:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f22:	f023 030f 	bic.w	r3, r3, #15
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6851      	ldr	r1, [r2, #4]
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	6892      	ldr	r2, [r2, #8]
 8001f2e:	4311      	orrs	r1, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	68d2      	ldr	r2, [r2, #12]
 8001f34:	4311      	orrs	r1, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6992      	ldr	r2, [r2, #24]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f46:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a1b      	ldr	r3, [r3, #32]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d161      	bne.n	8002014 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a38      	ldr	r2, [pc, #224]	; (8002034 <HAL_I2S_Init+0x274>)
 8001f54:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a37      	ldr	r2, [pc, #220]	; (8002038 <HAL_I2S_Init+0x278>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_I2S_Init+0x1a4>
 8001f60:	4b36      	ldr	r3, [pc, #216]	; (800203c <HAL_I2S_Init+0x27c>)
 8001f62:	e001      	b.n	8001f68 <HAL_I2S_Init+0x1a8>
 8001f64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6812      	ldr	r2, [r2, #0]
 8001f6e:	4932      	ldr	r1, [pc, #200]	; (8002038 <HAL_I2S_Init+0x278>)
 8001f70:	428a      	cmp	r2, r1
 8001f72:	d101      	bne.n	8001f78 <HAL_I2S_Init+0x1b8>
 8001f74:	4a31      	ldr	r2, [pc, #196]	; (800203c <HAL_I2S_Init+0x27c>)
 8001f76:	e001      	b.n	8001f7c <HAL_I2S_Init+0x1bc>
 8001f78:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f7c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f80:	f023 030f 	bic.w	r3, r3, #15
 8001f84:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a2b      	ldr	r2, [pc, #172]	; (8002038 <HAL_I2S_Init+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_I2S_Init+0x1d4>
 8001f90:	4b2a      	ldr	r3, [pc, #168]	; (800203c <HAL_I2S_Init+0x27c>)
 8001f92:	e001      	b.n	8001f98 <HAL_I2S_Init+0x1d8>
 8001f94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f98:	2202      	movs	r2, #2
 8001f9a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a25      	ldr	r2, [pc, #148]	; (8002038 <HAL_I2S_Init+0x278>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d101      	bne.n	8001faa <HAL_I2S_Init+0x1ea>
 8001fa6:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_I2S_Init+0x27c>)
 8001fa8:	e001      	b.n	8001fae <HAL_I2S_Init+0x1ee>
 8001faa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001fae:	69db      	ldr	r3, [r3, #28]
 8001fb0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fba:	d003      	beq.n	8001fc4 <HAL_I2S_Init+0x204>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d103      	bne.n	8001fcc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	e001      	b.n	8001fd0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	b299      	uxth	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fe6:	4303      	orrs	r3, r0
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	430b      	orrs	r3, r1
 8001fec:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	897b      	ldrh	r3, [r7, #10]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ffc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a0d      	ldr	r2, [pc, #52]	; (8002038 <HAL_I2S_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d101      	bne.n	800200c <HAL_I2S_Init+0x24c>
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_I2S_Init+0x27c>)
 800200a:	e001      	b.n	8002010 <HAL_I2S_Init+0x250>
 800200c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002010:	897a      	ldrh	r2, [r7, #10]
 8002012:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2201      	movs	r2, #1
 800201e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3720      	adds	r7, #32
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	08002137 	.word	0x08002137
 8002030:	cccccccd 	.word	0xcccccccd
 8002034:	08002561 	.word	0x08002561
 8002038:	40003800 	.word	0x40003800
 800203c:	40003400 	.word	0x40003400

08002040 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	881a      	ldrh	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	1c9a      	adds	r2, r3, #2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209e:	b29b      	uxth	r3, r3
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b29a      	uxth	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10e      	bne.n	80020d0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020c0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f7ff ffb8 	bl	8002040 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	68da      	ldr	r2, [r3, #12]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ea:	b292      	uxth	r2, r2
 80020ec:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	1c9a      	adds	r2, r3, #2
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10e      	bne.n	800212e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800211e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff93 	bl	8002054 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b04      	cmp	r3, #4
 8002150:	d13a      	bne.n	80021c8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d109      	bne.n	8002170 <I2S_IRQHandler+0x3a>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d102      	bne.n	8002170 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ffb4 	bl	80020d8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002176:	2b40      	cmp	r3, #64	; 0x40
 8002178:	d126      	bne.n	80021c8 <I2S_IRQHandler+0x92>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0320 	and.w	r3, r3, #32
 8002184:	2b20      	cmp	r3, #32
 8002186:	d11f      	bne.n	80021c8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002196:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002198:	2300      	movs	r3, #0
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ff50 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b03      	cmp	r3, #3
 80021d2:	d136      	bne.n	8002242 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	f003 0302 	and.w	r3, r3, #2
 80021da:	2b02      	cmp	r3, #2
 80021dc:	d109      	bne.n	80021f2 <I2S_IRQHandler+0xbc>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e8:	2b80      	cmp	r3, #128	; 0x80
 80021ea:	d102      	bne.n	80021f2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff45 	bl	800207c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	f003 0308 	and.w	r3, r3, #8
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d122      	bne.n	8002242 <I2S_IRQHandler+0x10c>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b20      	cmp	r3, #32
 8002208:	d11b      	bne.n	8002242 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002218:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f043 0204 	orr.w	r2, r3, #4
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff ff13 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002242:	bf00      	nop
 8002244:	3718      	adds	r7, #24
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <HAL_I2SEx_TransmitReceive_DMA>:
 *         between Master and Slave(example: audio streaming).
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
		uint16_t Size)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b088      	sub	sp, #32
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	807b      	strh	r3, [r7, #2]
	uint32_t *tmp = NULL;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
	uint32_t tmp1 = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef errorcode = HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	77fb      	strb	r3, [r7, #31]

	if (hi2s->State != HAL_I2S_STATE_READY)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b01      	cmp	r3, #1
 8002270:	d002      	beq.n	8002278 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
	{
		errorcode = HAL_BUSY;
 8002272:	2302      	movs	r3, #2
 8002274:	77fb      	strb	r3, [r7, #31]
		goto error;
 8002276:	e160      	b.n	800253a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d005      	beq.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d002      	beq.n	800228a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002284:	887b      	ldrh	r3, [r7, #2]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_I2SEx_TransmitReceive_DMA+0x42>
	{
		return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e15a      	b.n	8002544 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d101      	bne.n	800229e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800229a:	2302      	movs	r3, #2
 800229c:	e152      	b.n	8002544 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2201      	movs	r2, #1
 80022a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hi2s->pTxBuffPtr = pTxData;
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	; 0x24
	hi2s->pRxBuffPtr = pRxData;
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	62da      	str	r2, [r3, #44]	; 0x2c

	tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	617b      	str	r3, [r7, #20]
	/* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
	 is selected during the I2S configuration phase, the Size parameter means the number
	 of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
	 frame is selected the Size parameter means the number of 16-bit data length. */
	if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b03      	cmp	r3, #3
 80022c2:	d002      	beq.n	80022ca <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	2b05      	cmp	r3, #5
 80022c8:	d114      	bne.n	80022f4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
	{
		hi2s->TxXferSize = (Size << 1U);
 80022ca:	887b      	ldrh	r3, [r7, #2]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2s->RxXferSize = (Size << 1U);
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	861a      	strh	r2, [r3, #48]	; 0x30
		hi2s->RxXferCount = (Size << 1U);
 80022e8:	887b      	ldrh	r3, [r7, #2]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	865a      	strh	r2, [r3, #50]	; 0x32
 80022f2:	e00b      	b.n	800230c <HAL_I2SEx_TransmitReceive_DMA+0xc0>
	}
	else
	{
		hi2s->TxXferSize = Size;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	887a      	ldrh	r2, [r7, #2]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2s->RxXferSize = Size;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	861a      	strh	r2, [r3, #48]	; 0x30
		hi2s->RxXferCount = Size;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	887a      	ldrh	r2, [r7, #2]
 800230a:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->State = HAL_I2S_STATE_BUSY_TX_RX;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2205      	movs	r2, #5
 8002316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Set the I2S Rx DMA Half transfer complete callback */
	hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	4a8b      	ldr	r2, [pc, #556]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002320:	641a      	str	r2, [r3, #64]	; 0x40

	/* Set the I2S Rx DMA transfer complete callback */
	hi2s->hdmarx->XferCpltCallback = I2SEx_TxRxDMACplt;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	4a8a      	ldr	r2, [pc, #552]	; (8002550 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002328:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Set the I2S Rx DMA error callback */
	hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232e:	4a89      	ldr	r2, [pc, #548]	; (8002554 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002330:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	4a85      	ldr	r2, [pc, #532]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002338:	641a      	str	r2, [r3, #64]	; 0x40

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = I2SEx_TxRxDMACplt;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233e:	4a84      	ldr	r2, [pc, #528]	; (8002550 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Set the I2S Tx DMA error callback */
	hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002346:	4a83      	ldr	r2, [pc, #524]	; (8002554 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002348:	64da      	str	r2, [r3, #76]	; 0x4c

	tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	69db      	ldr	r3, [r3, #28]
 8002350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002354:	617b      	str	r3, [r7, #20]
	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800235c:	d002      	beq.n	8002364 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d16b      	bne.n	800243c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
	{
		/* Enable the Rx DMA Stream */
		tmp = (uint32_t*) &pRxData;
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t) &I2SxEXT(hi2s->Instance)->DR, *(uint32_t*) tmp, hi2s->RxXferSize);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a79      	ldr	r2, [pc, #484]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d101      	bne.n	800237a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002376:	4b79      	ldr	r3, [pc, #484]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002378:	e001      	b.n	800237e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800237a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237e:	330c      	adds	r3, #12
 8002380:	4619      	mov	r1, r3
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800238a:	b29b      	uxth	r3, r3
 800238c:	f7ff f8a0 	bl	80014d0 <HAL_DMA_Start_IT>

		/* Enable Rx DMA Request */
		SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a70      	ldr	r2, [pc, #448]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800239a:	4b70      	ldr	r3, [pc, #448]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800239c:	e001      	b.n	80023a2 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800239e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	496b      	ldr	r1, [pc, #428]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023aa:	428b      	cmp	r3, r1
 80023ac:	d101      	bne.n	80023b2 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80023ae:	4b6b      	ldr	r3, [pc, #428]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023b0:	e001      	b.n	80023b6 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80023b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023b6:	f042 0201 	orr.w	r2, r2, #1
 80023ba:	605a      	str	r2, [r3, #4]

		/* Enable the Tx DMA Stream */
		tmp = (uint32_t*) &pTxData;
 80023bc:	f107 0308 	add.w	r3, r7, #8
 80023c0:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*) tmp, (uint32_t) &hi2s->Instance->DR, hi2s->TxXferSize);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	330c      	adds	r3, #12
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	f7ff f87a 	bl	80014d0 <HAL_DMA_Start_IT>

		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0202 	orr.w	r2, r2, #2
 80023ea:	605a      	str	r2, [r3, #4]

		/* Check if the I2S is already enabled */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023fa:	f000 809e 	beq.w	800253a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		{
			/* Enable I2Sext(receiver) before enabling I2Sx peripheral */
			__HAL_I2SEXT_ENABLE(hi2s);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a55      	ldr	r2, [pc, #340]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002408:	4b54      	ldr	r3, [pc, #336]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800240a:	e001      	b.n	8002410 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 800240c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002410:	69da      	ldr	r2, [r3, #28]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4950      	ldr	r1, [pc, #320]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002418:	428b      	cmp	r3, r1
 800241a:	d101      	bne.n	8002420 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800241c:	4b4f      	ldr	r3, [pc, #316]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800241e:	e001      	b.n	8002424 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002420:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002428:	61da      	str	r2, [r3, #28]

			/* Enable I2S peripheral after the I2Sext */
			__HAL_I2S_ENABLE(hi2s);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69da      	ldr	r2, [r3, #28]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002438:	61da      	str	r2, [r3, #28]
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800243a:	e07e      	b.n	800253a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		}
	}
	else
	{
		/* Check if Master Receiver mode is selected */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800244a:	d10a      	bne.n	8002462 <HAL_I2SEx_TransmitReceive_DMA+0x216>
		{
			/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
			 access to the SPI_SR register. */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800244c:	2300      	movs	r3, #0
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
		}
		/* Enable the Tx DMA Stream */
		tmp = (uint32_t*) &pTxData;
 8002462:	f107 0308 	add.w	r3, r7, #8
 8002466:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*) tmp, (uint32_t) &I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6819      	ldr	r1, [r3, #0]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a38      	ldr	r2, [pc, #224]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800247a:	4b38      	ldr	r3, [pc, #224]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800247c:	e001      	b.n	8002482 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800247e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002482:	330c      	adds	r3, #12
 8002484:	461a      	mov	r2, r3
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248a:	b29b      	uxth	r3, r3
 800248c:	f7ff f820 	bl	80014d0 <HAL_DMA_Start_IT>

		/* Enable Tx DMA Request */
		SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a30      	ldr	r2, [pc, #192]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800249a:	4b30      	ldr	r3, [pc, #192]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800249c:	e001      	b.n	80024a2 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800249e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	492b      	ldr	r1, [pc, #172]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024aa:	428b      	cmp	r3, r1
 80024ac:	d101      	bne.n	80024b2 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80024ae:	4b2b      	ldr	r3, [pc, #172]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024b0:	e001      	b.n	80024b6 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80024b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024b6:	f042 0202 	orr.w	r2, r2, #2
 80024ba:	605a      	str	r2, [r3, #4]

		/* Enable the Rx DMA Stream */
		tmp = (uint32_t*) &pRxData;
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t) &hi2s->Instance->DR, *(uint32_t*) tmp, hi2s->RxXferSize);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	330c      	adds	r3, #12
 80024ca:	4619      	mov	r1, r3
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	f7fe fffb 	bl	80014d0 <HAL_DMA_Start_IT>

		/* Enable Rx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 0201 	orr.w	r2, r2, #1
 80024e8:	605a      	str	r2, [r3, #4]

		/* Check if the I2S is already enabled */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	69db      	ldr	r3, [r3, #28]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d01e      	beq.n	8002538 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
		{
			/* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
			__HAL_I2SEXT_ENABLE(hi2s);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a16      	ldr	r2, [pc, #88]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d101      	bne.n	8002508 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002504:	4b15      	ldr	r3, [pc, #84]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002506:	e001      	b.n	800250c <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800250c:	69da      	ldr	r2, [r3, #28]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4911      	ldr	r1, [pc, #68]	; (8002558 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002514:	428b      	cmp	r3, r1
 8002516:	d101      	bne.n	800251c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002518:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800251a:	e001      	b.n	8002520 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800251c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002524:	61da      	str	r2, [r3, #28]
			/* Enable I2S peripheral before the I2Sext */
			__HAL_I2S_ENABLE(hi2s);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	69da      	ldr	r2, [r3, #28]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002534:	61da      	str	r2, [r3, #28]
 8002536:	e000      	b.n	800253a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		}
	}

	error:
 8002538:	bf00      	nop
	__HAL_UNLOCK(hi2s);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return errorcode;
 8002542:	7ffb      	ldrb	r3, [r7, #31]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	08002809 	.word	0x08002809
 8002550:	08002825 	.word	0x08002825
 8002554:	0800295d 	.word	0x0800295d
 8002558:	40003800 	.word	0x40003800
 800255c:	40003400 	.word	0x40003400

08002560 <HAL_I2SEx_FullDuplex_IRQHandler>:
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4aa2      	ldr	r2, [pc, #648]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800257a:	4ba2      	ldr	r3, [pc, #648]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800257c:	e001      	b.n	8002582 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800257e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a9b      	ldr	r2, [pc, #620]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d101      	bne.n	800259c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002598:	4b9a      	ldr	r3, [pc, #616]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800259a:	e001      	b.n	80025a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800259c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ac:	d004      	beq.n	80025b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 8099 	bne.w	80026ea <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
	{
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d107      	bne.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d002      	beq.n	80025d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fa05 	bl	80029dc <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d107      	bne.n	80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d002      	beq.n	80025ec <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 faa8 	bl	8002b3c <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d13a      	bne.n	800266c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d035      	beq.n	800266c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
		{
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a7e      	ldr	r2, [pc, #504]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d101      	bne.n	800260e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800260a:	4b7e      	ldr	r3, [pc, #504]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800260c:	e001      	b.n	8002612 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800260e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4979      	ldr	r1, [pc, #484]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800261a:	428b      	cmp	r3, r1
 800261c:	d101      	bne.n	8002622 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800261e:	4b79      	ldr	r3, [pc, #484]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002620:	e001      	b.n	8002626 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002622:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002626:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800262a:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800263a:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	60fb      	str	r3, [r7, #12]
 8002650:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	f043 0202 	orr.w	r2, r3, #2
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fcfe 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b08      	cmp	r3, #8
 8002674:	f040 80be 	bne.w	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f003 0320 	and.w	r3, r3, #32
 800267e:	2b00      	cmp	r3, #0
 8002680:	f000 80b8 	beq.w	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
		{
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002692:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a59      	ldr	r2, [pc, #356]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d101      	bne.n	80026a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800269e:	4b59      	ldr	r3, [pc, #356]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026a0:	e001      	b.n	80026a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80026a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4954      	ldr	r1, [pc, #336]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80026ae:	428b      	cmp	r3, r1
 80026b0:	d101      	bne.n	80026b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026b2:	4b54      	ldr	r3, [pc, #336]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026b4:	e001      	b.n	80026ba <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026be:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026c0:	2300      	movs	r3, #0
 80026c2:	60bb      	str	r3, [r7, #8]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2201      	movs	r2, #1
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026da:	f043 0204 	orr.w	r2, r3, #4
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7ff fcc0 	bl	8002068 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026e8:	e084      	b.n	80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else
	{
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d107      	bne.n	8002704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f99e 	bl	8002a40 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b01      	cmp	r3, #1
 800270c:	d107      	bne.n	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b00      	cmp	r3, #0
 8002716:	d002      	beq.n	800271e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f9dd 	bl	8002ad8 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002724:	2b40      	cmp	r3, #64	; 0x40
 8002726:	d12f      	bne.n	8002788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	f003 0320 	and.w	r3, r3, #32
 800272e:	2b00      	cmp	r3, #0
 8002730:	d02a      	beq.n	8002788 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
		{
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002740:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a2e      	ldr	r2, [pc, #184]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d101      	bne.n	8002750 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800274c:	4b2d      	ldr	r3, [pc, #180]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800274e:	e001      	b.n	8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002750:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4929      	ldr	r1, [pc, #164]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800275c:	428b      	cmp	r3, r1
 800275e:	d101      	bne.n	8002764 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002760:	4b28      	ldr	r3, [pc, #160]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002762:	e001      	b.n	8002768 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002764:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002768:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800276c:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277a:	f043 0202 	orr.w	r2, r3, #2
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff fc70 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	2b08      	cmp	r3, #8
 8002790:	d131      	bne.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02c      	beq.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
		{
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a17      	ldr	r2, [pc, #92]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d101      	bne.n	80027aa <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027a8:	e001      	b.n	80027ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80027aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4912      	ldr	r1, [pc, #72]	; (8002800 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027b6:	428b      	cmp	r3, r1
 80027b8:	d101      	bne.n	80027be <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027bc:	e001      	b.n	80027c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80027be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027c6:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	685a      	ldr	r2, [r3, #4]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027d6:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e4:	f043 0204 	orr.w	r2, r3, #4
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff fc3b 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80027f2:	e000      	b.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027f4:	bf00      	nop
}
 80027f6:	bf00      	nop
 80027f8:	3720      	adds	r7, #32
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	40003800 	.word	0x40003800
 8002804:	40003400 	.word	0x40003400

08002808 <I2SEx_TxRxDMAHalfCplt>:
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	60fb      	str	r3, [r7, #12]

	/* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
	HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fd ff22 	bl	8000660 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <I2SEx_TxRxDMACplt>:
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	60fb      	str	r3, [r7, #12]

	/* if DMA is configured in DMA_NORMAL mode */
	if (hdma->Init.Mode == DMA_NORMAL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8084 	bne.w	8002944 <I2SEx_TxRxDMACplt+0x120>
	{
		if (hi2s->hdmarx == hdma)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	429a      	cmp	r2, r3
 8002844:	d13c      	bne.n	80028c0 <I2SEx_TxRxDMACplt+0x9c>
		{
			/* Disable Rx DMA Request */
			if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002854:	d006      	beq.n	8002864 <I2SEx_TxRxDMACplt+0x40>
					|| ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002860:	2b00      	cmp	r3, #0
 8002862:	d116      	bne.n	8002892 <I2SEx_TxRxDMACplt+0x6e>
			{
				CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a3a      	ldr	r2, [pc, #232]	; (8002954 <I2SEx_TxRxDMACplt+0x130>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d101      	bne.n	8002872 <I2SEx_TxRxDMACplt+0x4e>
 800286e:	4b3a      	ldr	r3, [pc, #232]	; (8002958 <I2SEx_TxRxDMACplt+0x134>)
 8002870:	e001      	b.n	8002876 <I2SEx_TxRxDMACplt+0x52>
 8002872:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4935      	ldr	r1, [pc, #212]	; (8002954 <I2SEx_TxRxDMACplt+0x130>)
 800287e:	428b      	cmp	r3, r1
 8002880:	d101      	bne.n	8002886 <I2SEx_TxRxDMACplt+0x62>
 8002882:	4b35      	ldr	r3, [pc, #212]	; (8002958 <I2SEx_TxRxDMACplt+0x134>)
 8002884:	e001      	b.n	800288a <I2SEx_TxRxDMACplt+0x66>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	e007      	b.n	80028a2 <I2SEx_TxRxDMACplt+0x7e>
			}
			else
			{
				CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0201 	bic.w	r2, r2, #1
 80028a0:	605a      	str	r2, [r3, #4]
			}

			hi2s->RxXferCount = 0U;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	865a      	strh	r2, [r3, #50]	; 0x32

			if (hi2s->TxXferCount == 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <I2SEx_TxRxDMACplt+0x9c>
			{
				hi2s->State = HAL_I2S_STATE_READY;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
				HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028ba:	68f8      	ldr	r0, [r7, #12]
 80028bc:	f7fd ff10 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
			}
		}

		if (hi2s->hdmatx == hdma)
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d13c      	bne.n	8002944 <I2SEx_TxRxDMACplt+0x120>
		{
			/* Disable Tx DMA Request */
			if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028d8:	d006      	beq.n	80028e8 <I2SEx_TxRxDMACplt+0xc4>
					|| ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d108      	bne.n	80028fa <I2SEx_TxRxDMACplt+0xd6>
			{
				CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f022 0202 	bic.w	r2, r2, #2
 80028f6:	605a      	str	r2, [r3, #4]
 80028f8:	e015      	b.n	8002926 <I2SEx_TxRxDMACplt+0x102>
			}
			else
			{
				CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <I2SEx_TxRxDMACplt+0x130>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d101      	bne.n	8002908 <I2SEx_TxRxDMACplt+0xe4>
 8002904:	4b14      	ldr	r3, [pc, #80]	; (8002958 <I2SEx_TxRxDMACplt+0x134>)
 8002906:	e001      	b.n	800290c <I2SEx_TxRxDMACplt+0xe8>
 8002908:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800290c:	685a      	ldr	r2, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4910      	ldr	r1, [pc, #64]	; (8002954 <I2SEx_TxRxDMACplt+0x130>)
 8002914:	428b      	cmp	r3, r1
 8002916:	d101      	bne.n	800291c <I2SEx_TxRxDMACplt+0xf8>
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <I2SEx_TxRxDMACplt+0x134>)
 800291a:	e001      	b.n	8002920 <I2SEx_TxRxDMACplt+0xfc>
 800291c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002920:	f022 0202 	bic.w	r2, r2, #2
 8002924:	605a      	str	r2, [r3, #4]
			}

			hi2s->TxXferCount = 0U;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	855a      	strh	r2, [r3, #42]	; 0x2a

			if (hi2s->RxXferCount == 0U)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002930:	b29b      	uxth	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <I2SEx_TxRxDMACplt+0x120>
			{
				hi2s->State = HAL_I2S_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
				HAL_I2SEx_TxRxCpltCallback(hi2s);
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f7fd fece 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
			}
		}
	}
	HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002944:	68f8      	ldr	r0, [r7, #12]
 8002946:	f7fd fecb 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
}
 800294a:	bf00      	nop
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40003800 	.word	0x40003800
 8002958:	40003400 	.word	0x40003400

0800295c <I2SEx_TxRxDMAError>:
 * @brief  DMA I2S communication error callback
 * @param  hdma DMA handle
 * @retval None
 */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	60fb      	str	r3, [r7, #12]

	/* Disable Rx and Tx DMA Request */
	CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f022 0203 	bic.w	r2, r2, #3
 8002978:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a15      	ldr	r2, [pc, #84]	; (80029d4 <I2SEx_TxRxDMAError+0x78>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d101      	bne.n	8002988 <I2SEx_TxRxDMAError+0x2c>
 8002984:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <I2SEx_TxRxDMAError+0x7c>)
 8002986:	e001      	b.n	800298c <I2SEx_TxRxDMAError+0x30>
 8002988:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800298c:	685a      	ldr	r2, [r3, #4]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4910      	ldr	r1, [pc, #64]	; (80029d4 <I2SEx_TxRxDMAError+0x78>)
 8002994:	428b      	cmp	r3, r1
 8002996:	d101      	bne.n	800299c <I2SEx_TxRxDMAError+0x40>
 8002998:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <I2SEx_TxRxDMAError+0x7c>)
 800299a:	e001      	b.n	80029a0 <I2SEx_TxRxDMAError+0x44>
 800299c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029a0:	f022 0203 	bic.w	r2, r2, #3
 80029a4:	605a      	str	r2, [r3, #4]

	hi2s->TxXferCount = 0U;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2200      	movs	r2, #0
 80029aa:	855a      	strh	r2, [r3, #42]	; 0x2a
	hi2s->RxXferCount = 0U;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	865a      	strh	r2, [r3, #50]	; 0x32

	hi2s->State = HAL_I2S_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Set the error code and execute error callback*/
	SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	f043 0208 	orr.w	r2, r3, #8
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
	/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
	HAL_I2S_ErrorCallback(hi2s);
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f7ff fb4e 	bl	8002068 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029cc:	bf00      	nop
 80029ce:	3710      	adds	r7, #16
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40003800 	.word	0x40003800
 80029d8:	40003400 	.word	0x40003400

080029dc <I2SEx_TxISR_I2S>:
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e8:	1c99      	adds	r1, r3, #2
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	6251      	str	r1, [r2, #36]	; 0x24
 80029ee:	881a      	ldrh	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a

	if (hi2s->TxXferCount == 0U)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d113      	bne.n	8002a36 <I2SEx_TxISR_I2S+0x5a>
	{
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a1c:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d106      	bne.n	8002a36 <I2SEx_TxISR_I2S+0x5a>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7fd fe55 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <I2SEx_TxISR_I2SExt>:
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	1c99      	adds	r1, r3, #2
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6251      	str	r1, [r2, #36]	; 0x24
 8002a52:	8819      	ldrh	r1, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a1d      	ldr	r2, [pc, #116]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d101      	bne.n	8002a62 <I2SEx_TxISR_I2SExt+0x22>
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a60:	e001      	b.n	8002a66 <I2SEx_TxISR_I2SExt+0x26>
 8002a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a66:	460a      	mov	r2, r1
 8002a68:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	3b01      	subs	r3, #1
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	855a      	strh	r2, [r3, #42]	; 0x2a

	if (hi2s->TxXferCount == 0U)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <I2SEx_TxISR_I2SExt+0x86>
	{
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a12      	ldr	r2, [pc, #72]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d101      	bne.n	8002a90 <I2SEx_TxISR_I2SExt+0x50>
 8002a8c:	4b11      	ldr	r3, [pc, #68]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a8e:	e001      	b.n	8002a94 <I2SEx_TxISR_I2SExt+0x54>
 8002a90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	490d      	ldr	r1, [pc, #52]	; (8002ad0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a9c:	428b      	cmp	r3, r1
 8002a9e:	d101      	bne.n	8002aa4 <I2SEx_TxISR_I2SExt+0x64>
 8002aa0:	4b0c      	ldr	r3, [pc, #48]	; (8002ad4 <I2SEx_TxISR_I2SExt+0x94>)
 8002aa2:	e001      	b.n	8002aa8 <I2SEx_TxISR_I2SExt+0x68>
 8002aa4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002aa8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002aac:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d106      	bne.n	8002ac6 <I2SEx_TxISR_I2SExt+0x86>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7fd fe0d 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40003800 	.word	0x40003800
 8002ad4:	40003400 	.word	0x40003400

08002ad8 <I2SEx_RxISR_I2S>:
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68d8      	ldr	r0, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aea:	1c99      	adds	r1, r3, #2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002af0:	b282      	uxth	r2, r0
 8002af2:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	865a      	strh	r2, [r3, #50]	; 0x32

	if (hi2s->RxXferCount == 0U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d113      	bne.n	8002b34 <I2SEx_RxISR_I2S+0x5c>
	{
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685a      	ldr	r2, [r3, #4]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b1a:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <I2SEx_RxISR_I2S+0x5c>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fd fdd6 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002b34:	bf00      	nop
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2SEx_RxISR_I2SExt>:
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a20      	ldr	r2, [pc, #128]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <I2SEx_RxISR_I2SExt+0x16>
 8002b4e:	4b20      	ldr	r3, [pc, #128]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b50:	e001      	b.n	8002b56 <I2SEx_RxISR_I2SExt+0x1a>
 8002b52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b56:	68d8      	ldr	r0, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	1c99      	adds	r1, r3, #2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b62:	b282      	uxth	r2, r0
 8002b64:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	865a      	strh	r2, [r3, #50]	; 0x32

	if (hi2s->RxXferCount == 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d121      	bne.n	8002bc2 <I2SEx_RxISR_I2SExt+0x86>
	{
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a12      	ldr	r2, [pc, #72]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <I2SEx_RxISR_I2SExt+0x50>
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b8a:	e001      	b.n	8002b90 <I2SEx_RxISR_I2SExt+0x54>
 8002b8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	490d      	ldr	r1, [pc, #52]	; (8002bcc <I2SEx_RxISR_I2SExt+0x90>)
 8002b98:	428b      	cmp	r3, r1
 8002b9a:	d101      	bne.n	8002ba0 <I2SEx_RxISR_I2SExt+0x64>
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b9e:	e001      	b.n	8002ba4 <I2SEx_RxISR_I2SExt+0x68>
 8002ba0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ba4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ba8:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <I2SEx_RxISR_I2SExt+0x86>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7fd fd8f 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40003800 	.word	0x40003800
 8002bd0:	40003400 	.word	0x40003400

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e25b      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d075      	beq.n	8002cde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf2:	4ba3      	ldr	r3, [pc, #652]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
 8002bfa:	2b04      	cmp	r3, #4
 8002bfc:	d00c      	beq.n	8002c18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4ba0      	ldr	r3, [pc, #640]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d112      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c0a:	4b9d      	ldr	r3, [pc, #628]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c16:	d10b      	bne.n	8002c30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c18:	4b99      	ldr	r3, [pc, #612]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d05b      	beq.n	8002cdc <HAL_RCC_OscConfig+0x108>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d157      	bne.n	8002cdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e236      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c38:	d106      	bne.n	8002c48 <HAL_RCC_OscConfig+0x74>
 8002c3a:	4b91      	ldr	r3, [pc, #580]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a90      	ldr	r2, [pc, #576]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	e01d      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b8b      	ldr	r3, [pc, #556]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a8a      	ldr	r2, [pc, #552]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b88      	ldr	r3, [pc, #544]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a87      	ldr	r2, [pc, #540]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0xb0>
 8002c6c:	4b84      	ldr	r3, [pc, #528]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a83      	ldr	r2, [pc, #524]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c76:	6013      	str	r3, [r2, #0]
 8002c78:	4b81      	ldr	r3, [pc, #516]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a80      	ldr	r2, [pc, #512]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d013      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c8c:	f7fe fa30 	bl	80010f0 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c94:	f7fe fa2c 	bl	80010f0 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b64      	cmp	r3, #100	; 0x64
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e1fb      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca6:	4b76      	ldr	r3, [pc, #472]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0f0      	beq.n	8002c94 <HAL_RCC_OscConfig+0xc0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fa1c 	bl	80010f0 <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cbc:	f7fe fa18 	bl	80010f0 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b64      	cmp	r3, #100	; 0x64
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e1e7      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cce:	4b6c      	ldr	r3, [pc, #432]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0xe8>
 8002cda:	e000      	b.n	8002cde <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d063      	beq.n	8002db2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00b      	beq.n	8002d0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b62      	ldr	r3, [pc, #392]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d11c      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d116      	bne.n	8002d3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0e:	4b5c      	ldr	r3, [pc, #368]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d005      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d001      	beq.n	8002d26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e1bb      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d26:	4b56      	ldr	r3, [pc, #344]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691b      	ldr	r3, [r3, #16]
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	4952      	ldr	r1, [pc, #328]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d3a:	e03a      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d020      	beq.n	8002d86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d44:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d4a:	f7fe f9d1 	bl	80010f0 <HAL_GetTick>
 8002d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d50:	e008      	b.n	8002d64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d52:	f7fe f9cd 	bl	80010f0 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	d901      	bls.n	8002d64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	e19c      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d64:	4b46      	ldr	r3, [pc, #280]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0f0      	beq.n	8002d52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d70:	4b43      	ldr	r3, [pc, #268]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	00db      	lsls	r3, r3, #3
 8002d7e:	4940      	ldr	r1, [pc, #256]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]
 8002d84:	e015      	b.n	8002db2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_OscConfig+0x2b0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f9b0 	bl	80010f0 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d94:	f7fe f9ac 	bl	80010f0 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e17b      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da6:	4b36      	ldr	r3, [pc, #216]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1f0      	bne.n	8002d94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0308 	and.w	r3, r3, #8
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d030      	beq.n	8002e20 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <HAL_RCC_OscConfig+0x2b4>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dcc:	f7fe f990 	bl	80010f0 <HAL_GetTick>
 8002dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd2:	e008      	b.n	8002de6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dd4:	f7fe f98c 	bl	80010f0 <HAL_GetTick>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e15b      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de6:	4b26      	ldr	r3, [pc, #152]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0f0      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x200>
 8002df2:	e015      	b.n	8002e20 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df4:	4b24      	ldr	r3, [pc, #144]	; (8002e88 <HAL_RCC_OscConfig+0x2b4>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dfa:	f7fe f979 	bl	80010f0 <HAL_GetTick>
 8002dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e00:	e008      	b.n	8002e14 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e02:	f7fe f975 	bl	80010f0 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e144      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1f0      	bne.n	8002e02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80a0 	beq.w	8002f6e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b13      	ldr	r3, [pc, #76]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	4a0e      	ldr	r2, [pc, #56]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e4e:	4b0c      	ldr	r3, [pc, #48]	; (8002e80 <HAL_RCC_OscConfig+0x2ac>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b0b      	ldr	r3, [pc, #44]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d121      	bne.n	8002eae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b08      	ldr	r3, [pc, #32]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a07      	ldr	r2, [pc, #28]	; (8002e8c <HAL_RCC_OscConfig+0x2b8>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f93b 	bl	80010f0 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e011      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ce>
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	42470000 	.word	0x42470000
 8002e88:	42470e80 	.word	0x42470e80
 8002e8c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e90:	f7fe f92e 	bl	80010f0 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0fd      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea2:	4b81      	ldr	r3, [pc, #516]	; (80030a8 <HAL_RCC_OscConfig+0x4d4>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
 8002eb6:	4b7d      	ldr	r3, [pc, #500]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eba:	4a7c      	ldr	r2, [pc, #496]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec2:	e01c      	b.n	8002efe <HAL_RCC_OscConfig+0x32a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d10c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x312>
 8002ecc:	4b77      	ldr	r3, [pc, #476]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed0:	4a76      	ldr	r2, [pc, #472]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ed2:	f043 0304 	orr.w	r3, r3, #4
 8002ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed8:	4b74      	ldr	r3, [pc, #464]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002edc:	4a73      	ldr	r2, [pc, #460]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee4:	e00b      	b.n	8002efe <HAL_RCC_OscConfig+0x32a>
 8002ee6:	4b71      	ldr	r3, [pc, #452]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eea:	4a70      	ldr	r2, [pc, #448]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef2:	4b6e      	ldr	r3, [pc, #440]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef6:	4a6d      	ldr	r2, [pc, #436]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d015      	beq.n	8002f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f06:	f7fe f8f3 	bl	80010f0 <HAL_GetTick>
 8002f0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7fe f8ef 	bl	80010f0 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e0bc      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	4b61      	ldr	r3, [pc, #388]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCC_OscConfig+0x33a>
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f32:	f7fe f8dd 	bl	80010f0 <HAL_GetTick>
 8002f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f3a:	f7fe f8d9 	bl	80010f0 <HAL_GetTick>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e0a6      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f54:	f003 0302 	and.w	r3, r3, #2
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d1ee      	bne.n	8002f3a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f5c:	7dfb      	ldrb	r3, [r7, #23]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d105      	bne.n	8002f6e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f62:	4b52      	ldr	r3, [pc, #328]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a51      	ldr	r2, [pc, #324]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002f68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 8092 	beq.w	800309c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f78:	4b4c      	ldr	r3, [pc, #304]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
 8002f80:	2b08      	cmp	r3, #8
 8002f82:	d05c      	beq.n	800303e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d141      	bne.n	8003010 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f8c:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <HAL_RCC_OscConfig+0x4dc>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f92:	f7fe f8ad 	bl	80010f0 <HAL_GetTick>
 8002f96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f98:	e008      	b.n	8002fac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f9a:	f7fe f8a9 	bl	80010f0 <HAL_GetTick>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	1ad3      	subs	r3, r2, r3
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e078      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fac:	4b3f      	ldr	r3, [pc, #252]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f0      	bne.n	8002f9a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69da      	ldr	r2, [r3, #28]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6a1b      	ldr	r3, [r3, #32]
 8002fc0:	431a      	orrs	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	019b      	lsls	r3, r3, #6
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fda:	061b      	lsls	r3, r3, #24
 8002fdc:	4933      	ldr	r1, [pc, #204]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe2:	4b33      	ldr	r3, [pc, #204]	; (80030b0 <HAL_RCC_OscConfig+0x4dc>)
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe8:	f7fe f882 	bl	80010f0 <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ff0:	f7fe f87e 	bl	80010f0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e04d      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003002:	4b2a      	ldr	r3, [pc, #168]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d0f0      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
 800300e:	e045      	b.n	800309c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003010:	4b27      	ldr	r3, [pc, #156]	; (80030b0 <HAL_RCC_OscConfig+0x4dc>)
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003016:	f7fe f86b 	bl	80010f0 <HAL_GetTick>
 800301a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301c:	e008      	b.n	8003030 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301e:	f7fe f867 	bl	80010f0 <HAL_GetTick>
 8003022:	4602      	mov	r2, r0
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	2b02      	cmp	r3, #2
 800302a:	d901      	bls.n	8003030 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800302c:	2303      	movs	r3, #3
 800302e:	e036      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003030:	4b1e      	ldr	r3, [pc, #120]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f0      	bne.n	800301e <HAL_RCC_OscConfig+0x44a>
 800303c:	e02e      	b.n	800309c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e029      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800304a:	4b18      	ldr	r3, [pc, #96]	; (80030ac <HAL_RCC_OscConfig+0x4d8>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	429a      	cmp	r2, r3
 800305c:	d11c      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003068:	429a      	cmp	r2, r3
 800306a:	d115      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800306c:	68fa      	ldr	r2, [r7, #12]
 800306e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003072:	4013      	ands	r3, r2
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003078:	4293      	cmp	r3, r2
 800307a:	d10d      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003086:	429a      	cmp	r2, r3
 8003088:	d106      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003094:	429a      	cmp	r2, r3
 8003096:	d001      	beq.n	800309c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e000      	b.n	800309e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3718      	adds	r7, #24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40007000 	.word	0x40007000
 80030ac:	40023800 	.word	0x40023800
 80030b0:	42470060 	.word	0x42470060

080030b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d101      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0cc      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030c8:	4b68      	ldr	r3, [pc, #416]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	683a      	ldr	r2, [r7, #0]
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d90c      	bls.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030d8:	683a      	ldr	r2, [r7, #0]
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030de:	4b63      	ldr	r3, [pc, #396]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	683a      	ldr	r2, [r7, #0]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d001      	beq.n	80030f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0b8      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003108:	4b59      	ldr	r3, [pc, #356]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a58      	ldr	r2, [pc, #352]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003112:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0308 	and.w	r3, r3, #8
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003120:	4b53      	ldr	r3, [pc, #332]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4a52      	ldr	r2, [pc, #328]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800312a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800312c:	4b50      	ldr	r3, [pc, #320]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	494d      	ldr	r1, [pc, #308]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	d044      	beq.n	80031d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d107      	bne.n	8003162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003152:	4b47      	ldr	r3, [pc, #284]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d119      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b02      	cmp	r3, #2
 8003168:	d003      	beq.n	8003172 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800316e:	2b03      	cmp	r3, #3
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003172:	4b3f      	ldr	r3, [pc, #252]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d109      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e06f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003182:	4b3b      	ldr	r3, [pc, #236]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d101      	bne.n	8003192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e067      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003192:	4b37      	ldr	r3, [pc, #220]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f023 0203 	bic.w	r2, r3, #3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	4934      	ldr	r1, [pc, #208]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031a0:	4313      	orrs	r3, r2
 80031a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a4:	f7fd ffa4 	bl	80010f0 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031aa:	e00a      	b.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031ac:	f7fd ffa0 	bl	80010f0 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e04f      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c2:	4b2b      	ldr	r3, [pc, #172]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 020c 	and.w	r2, r3, #12
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d1eb      	bne.n	80031ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031d4:	4b25      	ldr	r3, [pc, #148]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d20c      	bcs.n	80031fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	b2d2      	uxtb	r2, r2
 80031e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ea:	4b20      	ldr	r3, [pc, #128]	; (800326c <HAL_RCC_ClockConfig+0x1b8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 030f 	and.w	r3, r3, #15
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d001      	beq.n	80031fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e032      	b.n	8003262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 0304 	and.w	r3, r3, #4
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003208:	4b19      	ldr	r3, [pc, #100]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d009      	beq.n	800323a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003226:	4b12      	ldr	r3, [pc, #72]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	490e      	ldr	r1, [pc, #56]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800323a:	f000 f821 	bl	8003280 <HAL_RCC_GetSysClockFreq>
 800323e:	4602      	mov	r2, r0
 8003240:	4b0b      	ldr	r3, [pc, #44]	; (8003270 <HAL_RCC_ClockConfig+0x1bc>)
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	091b      	lsrs	r3, r3, #4
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	490a      	ldr	r1, [pc, #40]	; (8003274 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	5ccb      	ldrb	r3, [r1, r3]
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a09      	ldr	r2, [pc, #36]	; (8003278 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003256:	4b09      	ldr	r3, [pc, #36]	; (800327c <HAL_RCC_ClockConfig+0x1c8>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd ff04 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	40023c00 	.word	0x40023c00
 8003270:	40023800 	.word	0x40023800
 8003274:	08003734 	.word	0x08003734
 8003278:	20000000 	.word	0x20000000
 800327c:	20000004 	.word	0x20000004

08003280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003284:	b084      	sub	sp, #16
 8003286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	607b      	str	r3, [r7, #4]
 800328c:	2300      	movs	r3, #0
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	2300      	movs	r3, #0
 8003292:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003298:	4b67      	ldr	r3, [pc, #412]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 030c 	and.w	r3, r3, #12
 80032a0:	2b08      	cmp	r3, #8
 80032a2:	d00d      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x40>
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	f200 80bd 	bhi.w	8003424 <HAL_RCC_GetSysClockFreq+0x1a4>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_RCC_GetSysClockFreq+0x3a>
 80032b2:	e0b7      	b.n	8003424 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b4:	4b61      	ldr	r3, [pc, #388]	; (800343c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032b6:	60bb      	str	r3, [r7, #8]
       break;
 80032b8:	e0b7      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032ba:	4b61      	ldr	r3, [pc, #388]	; (8003440 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032bc:	60bb      	str	r3, [r7, #8]
      break;
 80032be:	e0b4      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c0:	4b5d      	ldr	r3, [pc, #372]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ca:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d04d      	beq.n	8003372 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	099b      	lsrs	r3, r3, #6
 80032dc:	461a      	mov	r2, r3
 80032de:	f04f 0300 	mov.w	r3, #0
 80032e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	ea02 0800 	and.w	r8, r2, r0
 80032ee:	ea03 0901 	and.w	r9, r3, r1
 80032f2:	4640      	mov	r0, r8
 80032f4:	4649      	mov	r1, r9
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	014b      	lsls	r3, r1, #5
 8003300:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003304:	0142      	lsls	r2, r0, #5
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	ebb0 0008 	subs.w	r0, r0, r8
 800330e:	eb61 0109 	sbc.w	r1, r1, r9
 8003312:	f04f 0200 	mov.w	r2, #0
 8003316:	f04f 0300 	mov.w	r3, #0
 800331a:	018b      	lsls	r3, r1, #6
 800331c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003320:	0182      	lsls	r2, r0, #6
 8003322:	1a12      	subs	r2, r2, r0
 8003324:	eb63 0301 	sbc.w	r3, r3, r1
 8003328:	f04f 0000 	mov.w	r0, #0
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	00d9      	lsls	r1, r3, #3
 8003332:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003336:	00d0      	lsls	r0, r2, #3
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	eb12 0208 	adds.w	r2, r2, r8
 8003340:	eb43 0309 	adc.w	r3, r3, r9
 8003344:	f04f 0000 	mov.w	r0, #0
 8003348:	f04f 0100 	mov.w	r1, #0
 800334c:	0259      	lsls	r1, r3, #9
 800334e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003352:	0250      	lsls	r0, r2, #9
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	461a      	mov	r2, r3
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f7fc ff30 	bl	80001c8 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e04a      	b.n	8003408 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	099b      	lsrs	r3, r3, #6
 8003378:	461a      	mov	r2, r3
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	ea02 0400 	and.w	r4, r2, r0
 800338a:	ea03 0501 	and.w	r5, r3, r1
 800338e:	4620      	mov	r0, r4
 8003390:	4629      	mov	r1, r5
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	014b      	lsls	r3, r1, #5
 800339c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033a0:	0142      	lsls	r2, r0, #5
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	1b00      	subs	r0, r0, r4
 80033a8:	eb61 0105 	sbc.w	r1, r1, r5
 80033ac:	f04f 0200 	mov.w	r2, #0
 80033b0:	f04f 0300 	mov.w	r3, #0
 80033b4:	018b      	lsls	r3, r1, #6
 80033b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033ba:	0182      	lsls	r2, r0, #6
 80033bc:	1a12      	subs	r2, r2, r0
 80033be:	eb63 0301 	sbc.w	r3, r3, r1
 80033c2:	f04f 0000 	mov.w	r0, #0
 80033c6:	f04f 0100 	mov.w	r1, #0
 80033ca:	00d9      	lsls	r1, r3, #3
 80033cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033d0:	00d0      	lsls	r0, r2, #3
 80033d2:	4602      	mov	r2, r0
 80033d4:	460b      	mov	r3, r1
 80033d6:	1912      	adds	r2, r2, r4
 80033d8:	eb45 0303 	adc.w	r3, r5, r3
 80033dc:	f04f 0000 	mov.w	r0, #0
 80033e0:	f04f 0100 	mov.w	r1, #0
 80033e4:	0299      	lsls	r1, r3, #10
 80033e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033ea:	0290      	lsls	r0, r2, #10
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f7fc fee4 	bl	80001c8 <__aeabi_uldivmod>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4613      	mov	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003408:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	0c1b      	lsrs	r3, r3, #16
 800340e:	f003 0303 	and.w	r3, r3, #3
 8003412:	3301      	adds	r3, #1
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003420:	60bb      	str	r3, [r7, #8]
      break;
 8003422:	e002      	b.n	800342a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003426:	60bb      	str	r3, [r7, #8]
      break;
 8003428:	bf00      	nop
    }
  }
  return sysclockfreq;
 800342a:	68bb      	ldr	r3, [r7, #8]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	00f42400 	.word	0x00f42400
 8003440:	007a1200 	.word	0x007a1200

08003444 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003468:	2b00      	cmp	r3, #0
 800346a:	d035      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800346c:	4b62      	ldr	r3, [pc, #392]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003472:	f7fd fe3d 	bl	80010f0 <HAL_GetTick>
 8003476:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003478:	e008      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800347a:	f7fd fe39 	bl	80010f0 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e0b0      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800348c:	4b5b      	ldr	r3, [pc, #364]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d1f0      	bne.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	019a      	lsls	r2, r3, #6
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	071b      	lsls	r3, r3, #28
 80034a4:	4955      	ldr	r1, [pc, #340]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034ac:	4b52      	ldr	r3, [pc, #328]	; (80035f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034b2:	f7fd fe1d 	bl	80010f0 <HAL_GetTick>
 80034b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034ba:	f7fd fe19 	bl	80010f0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e090      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	f000 8083 	beq.w	80035ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b44      	ldr	r3, [pc, #272]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	4a43      	ldr	r2, [pc, #268]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f4:	6413      	str	r3, [r2, #64]	; 0x40
 80034f6:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003502:	4b3f      	ldr	r3, [pc, #252]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a3e      	ldr	r2, [pc, #248]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800350e:	f7fd fdef 	bl	80010f0 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003516:	f7fd fdeb 	bl	80010f0 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e062      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003528:	4b35      	ldr	r3, [pc, #212]	; (8003600 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003534:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02f      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800354c:	693a      	ldr	r2, [r7, #16]
 800354e:	429a      	cmp	r2, r3
 8003550:	d028      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003552:	4b2a      	ldr	r3, [pc, #168]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003556:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800355c:	4b29      	ldr	r3, [pc, #164]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800355e:	2201      	movs	r2, #1
 8003560:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003562:	4b28      	ldr	r3, [pc, #160]	; (8003604 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003568:	4a24      	ldr	r2, [pc, #144]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b01      	cmp	r3, #1
 8003578:	d114      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800357a:	f7fd fdb9 	bl	80010f0 <HAL_GetTick>
 800357e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003580:	e00a      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003582:	f7fd fdb5 	bl	80010f0 <HAL_GetTick>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003590:	4293      	cmp	r3, r2
 8003592:	d901      	bls.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e02a      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003598:	4b18      	ldr	r3, [pc, #96]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800359a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ee      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035b0:	d10d      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80035b2:	4b12      	ldr	r3, [pc, #72]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c6:	490d      	ldr	r1, [pc, #52]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	608b      	str	r3, [r1, #8]
 80035cc:	e005      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035d8:	6093      	str	r3, [r2, #8]
 80035da:	4b08      	ldr	r3, [pc, #32]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	4905      	ldr	r1, [pc, #20]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	42470068 	.word	0x42470068
 80035fc:	40023800 	.word	0x40023800
 8003600:	40007000 	.word	0x40007000
 8003604:	42470e40 	.word	0x42470e40

08003608 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003610:	2300      	movs	r3, #0
 8003612:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003614:	2300      	movs	r3, #0
 8003616:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d13e      	bne.n	80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003626:	4b23      	ldr	r3, [pc, #140]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2b01      	cmp	r3, #1
 800363a:	d12f      	bne.n	800369c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800363c:	4b1e      	ldr	r3, [pc, #120]	; (80036b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800363e:	617b      	str	r3, [r7, #20]
          break;
 8003640:	e02f      	b.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003642:	4b1c      	ldr	r3, [pc, #112]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800364a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800364e:	d108      	bne.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003650:	4b18      	ldr	r3, [pc, #96]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003658:	4a18      	ldr	r2, [pc, #96]	; (80036bc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
 800365e:	613b      	str	r3, [r7, #16]
 8003660:	e007      	b.n	8003672 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003662:	4b14      	ldr	r3, [pc, #80]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366a:	4a15      	ldr	r2, [pc, #84]	; (80036c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800366c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003670:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003672:	4b10      	ldr	r3, [pc, #64]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003674:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003678:	099b      	lsrs	r3, r3, #6
 800367a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003686:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800368c:	0f1b      	lsrs	r3, r3, #28
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	617b      	str	r3, [r7, #20]
          break;
 800369a:	e002      	b.n	80036a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	617b      	str	r3, [r7, #20]
          break;
 80036a0:	bf00      	nop
        }
      }
      break;
 80036a2:	bf00      	nop
    }
  }
  return frequency;
 80036a4:	697b      	ldr	r3, [r7, #20]
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	371c      	adds	r7, #28
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800
 80036b8:	00bb8000 	.word	0x00bb8000
 80036bc:	007a1200 	.word	0x007a1200
 80036c0:	00f42400 	.word	0x00f42400

080036c4 <__libc_init_array>:
 80036c4:	b570      	push	{r4, r5, r6, lr}
 80036c6:	4d0d      	ldr	r5, [pc, #52]	; (80036fc <__libc_init_array+0x38>)
 80036c8:	4c0d      	ldr	r4, [pc, #52]	; (8003700 <__libc_init_array+0x3c>)
 80036ca:	1b64      	subs	r4, r4, r5
 80036cc:	10a4      	asrs	r4, r4, #2
 80036ce:	2600      	movs	r6, #0
 80036d0:	42a6      	cmp	r6, r4
 80036d2:	d109      	bne.n	80036e8 <__libc_init_array+0x24>
 80036d4:	4d0b      	ldr	r5, [pc, #44]	; (8003704 <__libc_init_array+0x40>)
 80036d6:	4c0c      	ldr	r4, [pc, #48]	; (8003708 <__libc_init_array+0x44>)
 80036d8:	f000 f820 	bl	800371c <_init>
 80036dc:	1b64      	subs	r4, r4, r5
 80036de:	10a4      	asrs	r4, r4, #2
 80036e0:	2600      	movs	r6, #0
 80036e2:	42a6      	cmp	r6, r4
 80036e4:	d105      	bne.n	80036f2 <__libc_init_array+0x2e>
 80036e6:	bd70      	pop	{r4, r5, r6, pc}
 80036e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ec:	4798      	blx	r3
 80036ee:	3601      	adds	r6, #1
 80036f0:	e7ee      	b.n	80036d0 <__libc_init_array+0xc>
 80036f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f6:	4798      	blx	r3
 80036f8:	3601      	adds	r6, #1
 80036fa:	e7f2      	b.n	80036e2 <__libc_init_array+0x1e>
 80036fc:	08003754 	.word	0x08003754
 8003700:	08003754 	.word	0x08003754
 8003704:	08003754 	.word	0x08003754
 8003708:	08003758 	.word	0x08003758

0800370c <memset>:
 800370c:	4402      	add	r2, r0
 800370e:	4603      	mov	r3, r0
 8003710:	4293      	cmp	r3, r2
 8003712:	d100      	bne.n	8003716 <memset+0xa>
 8003714:	4770      	bx	lr
 8003716:	f803 1b01 	strb.w	r1, [r3], #1
 800371a:	e7f9      	b.n	8003710 <memset+0x4>

0800371c <_init>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr

08003728 <_fini>:
 8003728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372a:	bf00      	nop
 800372c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372e:	bc08      	pop	{r3}
 8003730:	469e      	mov	lr, r3
 8003732:	4770      	bx	lr
