
STM32_Audio_DSP_5_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000359c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003724  08003724  00013724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800373c  0800373c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800373c  0800373c  0001373c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003744  08003744  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003744  08003744  00013744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800374c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08003758  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003758  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cde  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001901  00000000  00000000  00027d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006a8  00000000  00000000  00029620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005e0  00000000  00000000  00029cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f862  00000000  00000000  0002a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008ef6  00000000  00000000  00049b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000be145  00000000  00000000  00052a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00110b45  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001950  00000000  00000000  00110b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800370c 	.word	0x0800370c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800370c 	.word	0x0800370c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <Calc_IIR_Left>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int Calc_IIR_Left(int inSample)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b085      	sub	sp, #20
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
	float inSampleF = (float) inSample;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	ee07 3a90 	vmov	s15, r3
 80004ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80004d2:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF = l_a0 * inSampleF + l_a1 * lin_z1 + l_a2 * lin_z2 - l_b1 * lout_z1 - l_b2 * lout_z2;
 80004d6:	4b25      	ldr	r3, [pc, #148]	; (800056c <Calc_IIR_Left+0xac>)
 80004d8:	ed93 7a00 	vldr	s14, [r3]
 80004dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80004e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80004e4:	4b22      	ldr	r3, [pc, #136]	; (8000570 <Calc_IIR_Left+0xb0>)
 80004e6:	edd3 6a00 	vldr	s13, [r3]
 80004ea:	4b22      	ldr	r3, [pc, #136]	; (8000574 <Calc_IIR_Left+0xb4>)
 80004ec:	edd3 7a00 	vldr	s15, [r3]
 80004f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80004f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80004f8:	4b1f      	ldr	r3, [pc, #124]	; (8000578 <Calc_IIR_Left+0xb8>)
 80004fa:	edd3 6a00 	vldr	s13, [r3]
 80004fe:	4b1f      	ldr	r3, [pc, #124]	; (800057c <Calc_IIR_Left+0xbc>)
 8000500:	edd3 7a00 	vldr	s15, [r3]
 8000504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800050c:	4b1c      	ldr	r3, [pc, #112]	; (8000580 <Calc_IIR_Left+0xc0>)
 800050e:	edd3 6a00 	vldr	s13, [r3]
 8000512:	4b1c      	ldr	r3, [pc, #112]	; (8000584 <Calc_IIR_Left+0xc4>)
 8000514:	edd3 7a00 	vldr	s15, [r3]
 8000518:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800051c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000520:	4b19      	ldr	r3, [pc, #100]	; (8000588 <Calc_IIR_Left+0xc8>)
 8000522:	edd3 6a00 	vldr	s13, [r3]
 8000526:	4b19      	ldr	r3, [pc, #100]	; (800058c <Calc_IIR_Left+0xcc>)
 8000528:	edd3 7a00 	vldr	s15, [r3]
 800052c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000530:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000534:	edc7 7a02 	vstr	s15, [r7, #8]
	lin_z2 = lin_z1;
 8000538:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <Calc_IIR_Left+0xb4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a0f      	ldr	r2, [pc, #60]	; (800057c <Calc_IIR_Left+0xbc>)
 800053e:	6013      	str	r3, [r2, #0]
	lin_z1 = inSampleF;
 8000540:	4a0c      	ldr	r2, [pc, #48]	; (8000574 <Calc_IIR_Left+0xb4>)
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	6013      	str	r3, [r2, #0]
	lout_z2 = lout_z1;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <Calc_IIR_Left+0xc4>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	4a10      	ldr	r2, [pc, #64]	; (800058c <Calc_IIR_Left+0xcc>)
 800054c:	6013      	str	r3, [r2, #0]
	lout_z1 = outSampleF;
 800054e:	4a0d      	ldr	r2, [pc, #52]	; (8000584 <Calc_IIR_Left+0xc4>)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000554:	edd7 7a02 	vldr	s15, [r7, #8]
 8000558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800055c:	ee17 3a90 	vmov	r3, s15
}
 8000560:	4618      	mov	r0, r3
 8000562:	3714      	adds	r7, #20
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr
 800056c:	20000030 	.word	0x20000030
 8000570:	2000007c 	.word	0x2000007c
 8000574:	20000028 	.word	0x20000028
 8000578:	2000004c 	.word	0x2000004c
 800057c:	20000074 	.word	0x20000074
 8000580:	2000006c 	.word	0x2000006c
 8000584:	20000080 	.word	0x20000080
 8000588:	2000002c 	.word	0x2000002c
 800058c:	20000054 	.word	0x20000054

08000590 <Calc_IIR_Right>:

int Calc_IIR_Right(int inSample)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	float inSampleF = (float) inSample;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	ee07 3a90 	vmov	s15, r3
 800059e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005a2:	edc7 7a03 	vstr	s15, [r7, #12]
	float outSampleF = r_a0 * inSampleF + r_a1 * rin_z1 + r_a2 * rin_z2 - r_b1 * rout_z1 - r_b2 * rout_z2;
 80005a6:	4b25      	ldr	r3, [pc, #148]	; (800063c <Calc_IIR_Right+0xac>)
 80005a8:	ed93 7a00 	vldr	s14, [r3]
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80005b4:	4b22      	ldr	r3, [pc, #136]	; (8000640 <Calc_IIR_Right+0xb0>)
 80005b6:	edd3 6a00 	vldr	s13, [r3]
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <Calc_IIR_Right+0xb4>)
 80005bc:	edd3 7a00 	vldr	s15, [r3]
 80005c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005c8:	4b1f      	ldr	r3, [pc, #124]	; (8000648 <Calc_IIR_Right+0xb8>)
 80005ca:	edd3 6a00 	vldr	s13, [r3]
 80005ce:	4b1f      	ldr	r3, [pc, #124]	; (800064c <Calc_IIR_Right+0xbc>)
 80005d0:	edd3 7a00 	vldr	s15, [r3]
 80005d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80005dc:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <Calc_IIR_Right+0xc0>)
 80005de:	edd3 6a00 	vldr	s13, [r3]
 80005e2:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <Calc_IIR_Right+0xc4>)
 80005e4:	edd3 7a00 	vldr	s15, [r3]
 80005e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80005f0:	4b19      	ldr	r3, [pc, #100]	; (8000658 <Calc_IIR_Right+0xc8>)
 80005f2:	edd3 6a00 	vldr	s13, [r3]
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <Calc_IIR_Right+0xcc>)
 80005f8:	edd3 7a00 	vldr	s15, [r3]
 80005fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000600:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000604:	edc7 7a02 	vstr	s15, [r7, #8]
	rin_z2 = rin_z1;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <Calc_IIR_Right+0xb4>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <Calc_IIR_Right+0xbc>)
 800060e:	6013      	str	r3, [r2, #0]
	rin_z1 = inSampleF;
 8000610:	4a0c      	ldr	r2, [pc, #48]	; (8000644 <Calc_IIR_Right+0xb4>)
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	6013      	str	r3, [r2, #0]
	rout_z2 = rout_z1;
 8000616:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <Calc_IIR_Right+0xc4>)
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a10      	ldr	r2, [pc, #64]	; (800065c <Calc_IIR_Right+0xcc>)
 800061c:	6013      	str	r3, [r2, #0]
	rout_z1 = outSampleF;
 800061e:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <Calc_IIR_Right+0xc4>)
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	6013      	str	r3, [r2, #0]

	return (int) outSampleF;
 8000624:	edd7 7a02 	vldr	s15, [r7, #8]
 8000628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800062c:	ee17 3a90 	vmov	r3, s15
}
 8000630:	4618      	mov	r0, r3
 8000632:	3714      	adds	r7, #20
 8000634:	46bd      	mov	sp, r7
 8000636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063a:	4770      	bx	lr
 800063c:	20000038 	.word	0x20000038
 8000640:	20000068 	.word	0x20000068
 8000644:	20000070 	.word	0x20000070
 8000648:	2000014c 	.word	0x2000014c
 800064c:	20000084 	.word	0x20000084
 8000650:	20000034 	.word	0x20000034
 8000654:	20000050 	.word	0x20000050
 8000658:	20000088 	.word	0x20000088
 800065c:	20000078 	.word	0x20000078

08000660 <HAL_I2SEx_TxRxHalfCpltCallback>:

void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[0] << 16) | rxBuf[1];
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 800066a:	881b      	ldrh	r3, [r3, #0]
 800066c:	041b      	lsls	r3, r3, #16
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000670:	8852      	ldrh	r2, [r2, #2]
 8000672:	4313      	orrs	r3, r2
 8000674:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[2] << 16) | rxBuf[3];
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 8000678:	889b      	ldrh	r3, [r3, #4]
 800067a:	041b      	lsls	r3, r3, #16
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <HAL_I2SEx_TxRxHalfCpltCallback+0x78>)
 800067e:	88d2      	ldrh	r2, [r2, #6]
 8000680:	4313      	orrs	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample >> 1;
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	105b      	asrs	r3, r3, #1
 8000688:	60fb      	str	r3, [r7, #12]
	rSample = rSample >> 1;
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	105b      	asrs	r3, r3, #1
 800068e:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	4413      	add	r3, r2
 8000696:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f7ff ff0f 	bl	80004c0 <Calc_IIR_Left>
 80006a2:	60f8      	str	r0, [r7, #12]
	rSample = Calc_IIR_Right(rSample);
 80006a4:	68b8      	ldr	r0, [r7, #8]
 80006a6:	f7ff ff73 	bl	8000590 <Calc_IIR_Right>
 80006aa:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	txBuf[0] = (lSample >> 16) & 0xFFFF;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	0c1b      	lsrs	r3, r3, #16
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006b4:	801a      	strh	r2, [r3, #0]
	txBuf[1] = lSample & 0xFFFF;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	b29a      	uxth	r2, r3
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006bc:	805a      	strh	r2, [r3, #2]
	txBuf[2] = (rSample >> 16) & 0xFFFF;
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	0c1b      	lsrs	r3, r3, #16
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006c6:	809a      	strh	r2, [r3, #4]
	txBuf[3] = rSample & 0xFFFF;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b03      	ldr	r3, [pc, #12]	; (80006dc <HAL_I2SEx_TxRxHalfCpltCallback+0x7c>)
 80006ce:	80da      	strh	r2, [r3, #6]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000058 	.word	0x20000058
 80006dc:	2000003c 	.word	0x2000003c

080006e0 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

	//restore signed 24 bit sample from 16-bit buffers
	int lSample = (int) (rxBuf[4] << 16) | rxBuf[5];
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006ea:	891b      	ldrh	r3, [r3, #8]
 80006ec:	041b      	lsls	r3, r3, #16
 80006ee:	4a1a      	ldr	r2, [pc, #104]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006f0:	8952      	ldrh	r2, [r2, #10]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]
	int rSample = (int) (rxBuf[6] << 16) | rxBuf[7];
 80006f6:	4b18      	ldr	r3, [pc, #96]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006f8:	899b      	ldrh	r3, [r3, #12]
 80006fa:	041b      	lsls	r3, r3, #16
 80006fc:	4a16      	ldr	r2, [pc, #88]	; (8000758 <HAL_I2SEx_TxRxCpltCallback+0x78>)
 80006fe:	89d2      	ldrh	r2, [r2, #14]
 8000700:	4313      	orrs	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]

	// divide by 2 (rightshift) -> -3dB per sample
	lSample = lSample >> 1;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	105b      	asrs	r3, r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
	rSample = rSample >> 1;
 800070a:	68bb      	ldr	r3, [r7, #8]
 800070c:	105b      	asrs	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]

	//sum to mono
	lSample = rSample + lSample;
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4413      	add	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
	rSample = lSample;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	60bb      	str	r3, [r7, #8]

	//run HP on left channel and LP on right channel
	lSample = Calc_IIR_Left(lSample);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff fecf 	bl	80004c0 <Calc_IIR_Left>
 8000722:	60f8      	str	r0, [r7, #12]
	rSample = Calc_IIR_Right(rSample);
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f7ff ff33 	bl	8000590 <Calc_IIR_Right>
 800072a:	60b8      	str	r0, [r7, #8]

	//restore to buffer
	txBuf[4] = (lSample >> 16) & 0xFFFF;
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	0c1b      	lsrs	r3, r3, #16
 8000730:	b29a      	uxth	r2, r3
 8000732:	4b0a      	ldr	r3, [pc, #40]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000734:	811a      	strh	r2, [r3, #8]
	txBuf[5] = lSample & 0xFFFF;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	b29a      	uxth	r2, r3
 800073a:	4b08      	ldr	r3, [pc, #32]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800073c:	815a      	strh	r2, [r3, #10]
	txBuf[6] = (rSample >> 16) & 0xFFFF;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	b29a      	uxth	r2, r3
 8000744:	4b05      	ldr	r3, [pc, #20]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 8000746:	819a      	strh	r2, [r3, #12]
	txBuf[7] = rSample & 0xFFFF;
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	b29a      	uxth	r2, r3
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <HAL_I2SEx_TxRxCpltCallback+0x7c>)
 800074e:	81da      	strh	r2, [r3, #14]
}
 8000750:	bf00      	nop
 8000752:	3710      	adds	r7, #16
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}
 8000758:	20000058 	.word	0x20000058
 800075c:	2000003c 	.word	0x2000003c

08000760 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000764:	f000 fc56 	bl	8001014 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000768:	f000 f8a2 	bl	80008b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800076c:	f000 f97a 	bl	8000a64 <MX_GPIO_Init>
	MX_DMA_Init();
 8000770:	f000 f950 	bl	8000a14 <MX_DMA_Init>
	MX_I2S2_Init();
 8000774:	f000 f91e 	bl	80009b4 <MX_I2S2_Init>
	/* USER CODE BEGIN 2 */
	HAL_I2SEx_TransmitReceive_DMA(&hi2s2, txBuf, rxBuf, 4);
 8000778:	2304      	movs	r3, #4
 800077a:	4a34      	ldr	r2, [pc, #208]	; (800084c <main+0xec>)
 800077c:	4934      	ldr	r1, [pc, #208]	; (8000850 <main+0xf0>)
 800077e:	4835      	ldr	r0, [pc, #212]	; (8000854 <main+0xf4>)
 8000780:	f001 fd5c 	bl	800223c <HAL_I2SEx_TransmitReceive_DMA>

	//left-channel, High-Pass, 1kHz, fs=96kHz, q=0.7
	l_a0 = 0.9543457485325094f;
 8000784:	4b34      	ldr	r3, [pc, #208]	; (8000858 <main+0xf8>)
 8000786:	4a35      	ldr	r2, [pc, #212]	; (800085c <main+0xfc>)
 8000788:	601a      	str	r2, [r3, #0]
	l_a1 = -1.9086914970650188f;
 800078a:	4b35      	ldr	r3, [pc, #212]	; (8000860 <main+0x100>)
 800078c:	4a35      	ldr	r2, [pc, #212]	; (8000864 <main+0x104>)
 800078e:	601a      	str	r2, [r3, #0]
	l_a2 = 0.9543457485325094f;
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <main+0x108>)
 8000792:	4a32      	ldr	r2, [pc, #200]	; (800085c <main+0xfc>)
 8000794:	601a      	str	r2, [r3, #0]
	l_b1 = -1.9066459797557103f;
 8000796:	4b35      	ldr	r3, [pc, #212]	; (800086c <main+0x10c>)
 8000798:	4a35      	ldr	r2, [pc, #212]	; (8000870 <main+0x110>)
 800079a:	601a      	str	r2, [r3, #0]
	l_b2 = 0.9107370143743273f;
 800079c:	4b35      	ldr	r3, [pc, #212]	; (8000874 <main+0x114>)
 800079e:	4a36      	ldr	r2, [pc, #216]	; (8000878 <main+0x118>)
 80007a0:	601a      	str	r2, [r3, #0]

	//right-channel, Low-Pass, 1kHz, fs=96 kHz, q=0.7
	r_a0 = 0.0010227586546542474f;
 80007a2:	4b36      	ldr	r3, [pc, #216]	; (800087c <main+0x11c>)
 80007a4:	4a36      	ldr	r2, [pc, #216]	; (8000880 <main+0x120>)
 80007a6:	601a      	str	r2, [r3, #0]
	r_a1 = 0.002045517309308495f;
 80007a8:	4b36      	ldr	r3, [pc, #216]	; (8000884 <main+0x124>)
 80007aa:	4a37      	ldr	r2, [pc, #220]	; (8000888 <main+0x128>)
 80007ac:	601a      	str	r2, [r3, #0]
	r_a2 = 0.0010227586546542474f;
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <main+0x12c>)
 80007b0:	4a33      	ldr	r2, [pc, #204]	; (8000880 <main+0x120>)
 80007b2:	601a      	str	r2, [r3, #0]
	r_b1 = -1.9066459797557103f;
 80007b4:	4b36      	ldr	r3, [pc, #216]	; (8000890 <main+0x130>)
 80007b6:	4a2e      	ldr	r2, [pc, #184]	; (8000870 <main+0x110>)
 80007b8:	601a      	str	r2, [r3, #0]
	r_b2 = 0.9107370143743273f;
 80007ba:	4b36      	ldr	r3, [pc, #216]	; (8000894 <main+0x134>)
 80007bc:	4a2e      	ldr	r2, [pc, #184]	; (8000878 <main+0x118>)
 80007be:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		HAL_Delay(2000);
 80007c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007c4:	f000 fc98 	bl	80010f8 <HAL_Delay>
//		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == 1)
//		{
		//left-channel, High-Pass, 1kHz, fs=96kHz, q=0.7
		l_a0 = 0.9543457485325094f;
 80007c8:	4b23      	ldr	r3, [pc, #140]	; (8000858 <main+0xf8>)
 80007ca:	4a24      	ldr	r2, [pc, #144]	; (800085c <main+0xfc>)
 80007cc:	601a      	str	r2, [r3, #0]
		l_a1 = -1.9086914970650188f;
 80007ce:	4b24      	ldr	r3, [pc, #144]	; (8000860 <main+0x100>)
 80007d0:	4a24      	ldr	r2, [pc, #144]	; (8000864 <main+0x104>)
 80007d2:	601a      	str	r2, [r3, #0]
		l_a2 = 0.9543457485325094f;
 80007d4:	4b24      	ldr	r3, [pc, #144]	; (8000868 <main+0x108>)
 80007d6:	4a21      	ldr	r2, [pc, #132]	; (800085c <main+0xfc>)
 80007d8:	601a      	str	r2, [r3, #0]
		l_b1 = -1.9066459797557103f;
 80007da:	4b24      	ldr	r3, [pc, #144]	; (800086c <main+0x10c>)
 80007dc:	4a24      	ldr	r2, [pc, #144]	; (8000870 <main+0x110>)
 80007de:	601a      	str	r2, [r3, #0]
		l_b2 = 0.9107370143743273f;
 80007e0:	4b24      	ldr	r3, [pc, #144]	; (8000874 <main+0x114>)
 80007e2:	4a25      	ldr	r2, [pc, #148]	; (8000878 <main+0x118>)
 80007e4:	601a      	str	r2, [r3, #0]

		//right-channel, Low-Pass, 1kHz, fs=96 kHz, q=0.7
		r_a0 = 0.0010227586546542474f;
 80007e6:	4b25      	ldr	r3, [pc, #148]	; (800087c <main+0x11c>)
 80007e8:	4a25      	ldr	r2, [pc, #148]	; (8000880 <main+0x120>)
 80007ea:	601a      	str	r2, [r3, #0]
		r_a1 = 0.002045517309308495f;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <main+0x124>)
 80007ee:	4a26      	ldr	r2, [pc, #152]	; (8000888 <main+0x128>)
 80007f0:	601a      	str	r2, [r3, #0]
		r_a2 = 0.0010227586546542474f;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <main+0x12c>)
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <main+0x120>)
 80007f6:	601a      	str	r2, [r3, #0]
		r_b1 = -1.9066459797557103f;
 80007f8:	4b25      	ldr	r3, [pc, #148]	; (8000890 <main+0x130>)
 80007fa:	4a1d      	ldr	r2, [pc, #116]	; (8000870 <main+0x110>)
 80007fc:	601a      	str	r2, [r3, #0]
		r_b2 = 0.9107370143743273f;
 80007fe:	4b25      	ldr	r3, [pc, #148]	; (8000894 <main+0x134>)
 8000800:	4a1d      	ldr	r2, [pc, #116]	; (8000878 <main+0x118>)
 8000802:	601a      	str	r2, [r3, #0]
//		}
//		else
//		{
		HAL_Delay(2000);
 8000804:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000808:	f000 fc76 	bl	80010f8 <HAL_Delay>

		//left-channel, High-Pass, 2kHz, fs=96kHz, q=0.7
		l_a0 = 0.9115859293184209f;
 800080c:	4b12      	ldr	r3, [pc, #72]	; (8000858 <main+0xf8>)
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <main+0x138>)
 8000810:	601a      	str	r2, [r3, #0]
		l_a1 = -1.8231718586368417f;
 8000812:	4b13      	ldr	r3, [pc, #76]	; (8000860 <main+0x100>)
 8000814:	4a21      	ldr	r2, [pc, #132]	; (800089c <main+0x13c>)
 8000816:	601a      	str	r2, [r3, #0]
		l_a2 = 0.9115859293184209f;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <main+0x108>)
 800081a:	4a1f      	ldr	r2, [pc, #124]	; (8000898 <main+0x138>)
 800081c:	601a      	str	r2, [r3, #0]
		l_b1 = -1.8153396116625289f;
 800081e:	4b13      	ldr	r3, [pc, #76]	; (800086c <main+0x10c>)
 8000820:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <main+0x140>)
 8000822:	601a      	str	r2, [r3, #0]
		l_b2 = 0.8310041056111546f;
 8000824:	4b13      	ldr	r3, [pc, #76]	; (8000874 <main+0x114>)
 8000826:	4a1f      	ldr	r2, [pc, #124]	; (80008a4 <main+0x144>)
 8000828:	601a      	str	r2, [r3, #0]

		//right-channel, Low-Pass, 2kHz, fs=96 kHz, q=0.7
		r_a0 = 0.003916123487156427f;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <main+0x11c>)
 800082c:	4a1e      	ldr	r2, [pc, #120]	; (80008a8 <main+0x148>)
 800082e:	601a      	str	r2, [r3, #0]
		r_a1 = 0.007832246974312854f;
 8000830:	4b14      	ldr	r3, [pc, #80]	; (8000884 <main+0x124>)
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <main+0x14c>)
 8000834:	601a      	str	r2, [r3, #0]
		r_a2 = 0.003916123487156427f;
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <main+0x12c>)
 8000838:	4a1b      	ldr	r2, [pc, #108]	; (80008a8 <main+0x148>)
 800083a:	601a      	str	r2, [r3, #0]
		r_b1 = -1.8153396116625289f;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <main+0x130>)
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <main+0x140>)
 8000840:	601a      	str	r2, [r3, #0]
		r_b2 = 0.8310041056111546f;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x134>)
 8000844:	4a17      	ldr	r2, [pc, #92]	; (80008a4 <main+0x144>)
 8000846:	601a      	str	r2, [r3, #0]
		HAL_Delay(2000);
 8000848:	e7ba      	b.n	80007c0 <main+0x60>
 800084a:	bf00      	nop
 800084c:	20000058 	.word	0x20000058
 8000850:	2000003c 	.word	0x2000003c
 8000854:	20000150 	.word	0x20000150
 8000858:	20000030 	.word	0x20000030
 800085c:	3f745001 	.word	0x3f745001
 8000860:	2000007c 	.word	0x2000007c
 8000864:	bff45001 	.word	0xbff45001
 8000868:	2000004c 	.word	0x2000004c
 800086c:	2000006c 	.word	0x2000006c
 8000870:	bff40cfa 	.word	0xbff40cfa
 8000874:	2000002c 	.word	0x2000002c
 8000878:	3f692610 	.word	0x3f692610
 800087c:	20000038 	.word	0x20000038
 8000880:	3a860e16 	.word	0x3a860e16
 8000884:	20000068 	.word	0x20000068
 8000888:	3b060e16 	.word	0x3b060e16
 800088c:	2000014c 	.word	0x2000014c
 8000890:	20000034 	.word	0x20000034
 8000894:	20000088 	.word	0x20000088
 8000898:	3f695db2 	.word	0x3f695db2
 800089c:	bfe95db2 	.word	0xbfe95db2
 80008a0:	bfe85d0c 	.word	0xbfe85d0c
 80008a4:	3f54bcaf 	.word	0x3f54bcaf
 80008a8:	3b8052d3 	.word	0x3b8052d3
 80008ac:	3c0052d3 	.word	0x3c0052d3

080008b0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b098      	sub	sp, #96	; 0x60
 80008b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct =
 80008b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ba:	2230      	movs	r2, #48	; 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f002 ff1c 	bl	80036fc <memset>
	{ 0 };
	RCC_ClkInitTypeDef RCC_ClkInitStruct =
 80008c4:	f107 031c 	add.w	r3, r7, #28
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]
	{ 0 };
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct =
 80008d4:	f107 030c 	add.w	r3, r7, #12
 80008d8:	2200      	movs	r2, #0
 80008da:	601a      	str	r2, [r3, #0]
 80008dc:	605a      	str	r2, [r3, #4]
 80008de:	609a      	str	r2, [r3, #8]
 80008e0:	60da      	str	r2, [r3, #12]
	{ 0 };

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
 80008e6:	4b31      	ldr	r3, [pc, #196]	; (80009ac <SystemClock_Config+0xfc>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a30      	ldr	r2, [pc, #192]	; (80009ac <SystemClock_Config+0xfc>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b2e      	ldr	r3, [pc, #184]	; (80009ac <SystemClock_Config+0xfc>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	60bb      	str	r3, [r7, #8]
 80008fc:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <SystemClock_Config+0x100>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	4a2a      	ldr	r2, [pc, #168]	; (80009b0 <SystemClock_Config+0x100>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6013      	str	r3, [r2, #0]
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <SystemClock_Config+0x100>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091a:	2301      	movs	r3, #1
 800091c:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800091e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000922:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000924:	2302      	movs	r3, #2
 8000926:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000928:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800092c:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 800092e:	2308      	movs	r3, #8
 8000930:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000932:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000936:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800093c:	2307      	movs	r3, #7
 800093e:	65fb      	str	r3, [r7, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000944:	4618      	mov	r0, r3
 8000946:	f002 f93d 	bl	8002bc4 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0xa4>
	{
		Error_Handler();
 8000950:	f000 f9d0 	bl	8000cf4 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000954:	230f      	movs	r3, #15
 8000956:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000960:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	2105      	movs	r1, #5
 8000972:	4618      	mov	r0, r3
 8000974:	f002 fb96 	bl	80030a4 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xd2>
	{
		Error_Handler();
 800097e:	f000 f9b9 	bl	8000cf4 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000982:	2301      	movs	r3, #1
 8000984:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000986:	23c0      	movs	r3, #192	; 0xc0
 8000988:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800098a:	2302      	movs	r3, #2
 800098c:	617b      	str	r3, [r7, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	4618      	mov	r0, r3
 8000994:	f002 fd4e 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <SystemClock_Config+0xf2>
	{
		Error_Handler();
 800099e:	f000 f9a9 	bl	8000cf4 <Error_Handler>
	}
}
 80009a2:	bf00      	nop
 80009a4:	3760      	adds	r7, #96	; 0x60
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800
 80009b0:	40007000 	.word	0x40007000

080009b4 <MX_I2S2_Init>:
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009ba:	4a14      	ldr	r2, [pc, #80]	; (8000a0c <MX_I2S2_Init+0x58>)
 80009bc:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009c4:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009ce:	2203      	movs	r2, #3
 80009d0:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009d8:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <MX_I2S2_Init+0x5c>)
 80009de:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_I2S2_Init+0x54>)
 80009f4:	f001 f9dc 	bl	8001db0 <HAL_I2S_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_I2S2_Init+0x4e>
	{
		Error_Handler();
 80009fe:	f000 f979 	bl	8000cf4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000150 	.word	0x20000150
 8000a0c:	40003800 	.word	0x40003800
 8000a10:	00017700 	.word	0x00017700

08000a14 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <MX_DMA_Init+0x4c>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	200e      	movs	r0, #14
 8000a3c:	f000 fc5b 	bl	80012f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a40:	200e      	movs	r0, #14
 8000a42:	f000 fc74 	bl	800132e <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2100      	movs	r1, #0
 8000a4a:	200f      	movs	r0, #15
 8000a4c:	f000 fc53 	bl	80012f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a50:	200f      	movs	r0, #15
 8000a52:	f000 fc6c 	bl	800132e <HAL_NVIC_EnableIRQ>

}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800

08000a64 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct =
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	2200      	movs	r2, #0
 8000a70:	601a      	str	r2, [r3, #0]
 8000a72:	605a      	str	r2, [r3, #4]
 8000a74:	609a      	str	r2, [r3, #8]
 8000a76:	60da      	str	r2, [r3, #12]
 8000a78:	611a      	str	r2, [r3, #16]
	{ 0 };

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
 8000a7e:	4b96      	ldr	r3, [pc, #600]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4a95      	ldr	r2, [pc, #596]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000a84:	f043 0310 	orr.w	r3, r3, #16
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4b93      	ldr	r3, [pc, #588]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0310 	and.w	r3, r3, #16
 8000a92:	61bb      	str	r3, [r7, #24]
 8000a94:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	4b8f      	ldr	r3, [pc, #572]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	4a8e      	ldr	r2, [pc, #568]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000aa0:	f043 0304 	orr.w	r3, r3, #4
 8000aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa6:	4b8c      	ldr	r3, [pc, #560]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aaa:	f003 0304 	and.w	r3, r3, #4
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	613b      	str	r3, [r7, #16]
 8000ab6:	4b88      	ldr	r3, [pc, #544]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a87      	ldr	r2, [pc, #540]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b85      	ldr	r3, [pc, #532]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a80      	ldr	r2, [pc, #512]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b7e      	ldr	r3, [pc, #504]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0301 	and.w	r3, r3, #1
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	4b7a      	ldr	r3, [pc, #488]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a79      	ldr	r2, [pc, #484]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b77      	ldr	r3, [pc, #476]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	4b73      	ldr	r3, [pc, #460]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a72      	ldr	r2, [pc, #456]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000b10:	f043 0308 	orr.w	r3, r3, #8
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b70      	ldr	r3, [pc, #448]	; (8000cd8 <MX_GPIO_Init+0x274>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0308 	and.w	r3, r3, #8
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2108      	movs	r1, #8
 8000b26:	486d      	ldr	r0, [pc, #436]	; (8000cdc <MX_GPIO_Init+0x278>)
 8000b28:	f001 f928 	bl	8001d7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2101      	movs	r1, #1
 8000b30:	486b      	ldr	r0, [pc, #428]	; (8000ce0 <MX_GPIO_Init+0x27c>)
 8000b32:	f001 f923 	bl	8001d7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000b3c:	4869      	ldr	r0, [pc, #420]	; (8000ce4 <MX_GPIO_Init+0x280>)
 8000b3e:	f001 f91d 	bl	8001d7c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b42:	2308      	movs	r3, #8
 8000b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f107 031c 	add.w	r3, r7, #28
 8000b56:	4619      	mov	r1, r3
 8000b58:	4860      	ldr	r0, [pc, #384]	; (8000cdc <MX_GPIO_Init+0x278>)
 8000b5a:	f000 ff73 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 031c 	add.w	r3, r7, #28
 8000b72:	4619      	mov	r1, r3
 8000b74:	485a      	ldr	r0, [pc, #360]	; (8000ce0 <MX_GPIO_Init+0x27c>)
 8000b76:	f000 ff65 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b7e:	4b5a      	ldr	r3, [pc, #360]	; (8000ce8 <MX_GPIO_Init+0x284>)
 8000b80:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4857      	ldr	r0, [pc, #348]	; (8000cec <MX_GPIO_Init+0x288>)
 8000b8e:	f000 ff59 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA1 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_3;
 8000b92:	230a      	movs	r3, #10
 8000b94:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b96:	2300      	movs	r3, #0
 8000b98:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4851      	ldr	r0, [pc, #324]	; (8000cec <MX_GPIO_Init+0x288>)
 8000ba6:	f000 ff4d 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000baa:	2310      	movs	r3, #16
 8000bac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bba:	2306      	movs	r3, #6
 8000bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000bbe:	f107 031c 	add.w	r3, r7, #28
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	4849      	ldr	r0, [pc, #292]	; (8000cec <MX_GPIO_Init+0x288>)
 8000bc6:	f000 ff3d 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin | SPI1_MISO_Pin | SPI1_MOSI_Pin;
 8000bca:	23e0      	movs	r3, #224	; 0xe0
 8000bcc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bda:	2305      	movs	r3, #5
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4841      	ldr	r0, [pc, #260]	; (8000cec <MX_GPIO_Init+0x288>)
 8000be6:	f000 ff2d 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bea:	2304      	movs	r3, #4
 8000bec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 031c 	add.w	r3, r7, #28
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	483c      	ldr	r0, [pc, #240]	; (8000cf0 <MX_GPIO_Init+0x28c>)
 8000bfe:	f000 ff21 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
	 Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin | Audio_RST_Pin;
 8000c02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000c06:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4832      	ldr	r0, [pc, #200]	; (8000ce4 <MX_GPIO_Init+0x280>)
 8000c1c:	f000 ff12 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin | I2S3_SCK_Pin | I2S3_SD_Pin;
 8000c20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c24:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c26:	2302      	movs	r3, #2
 8000c28:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c32:	2306      	movs	r3, #6
 8000c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4828      	ldr	r0, [pc, #160]	; (8000ce0 <MX_GPIO_Init+0x27c>)
 8000c3e:	f000 ff01 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000c42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c46:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4825      	ldr	r0, [pc, #148]	; (8000cec <MX_GPIO_Init+0x288>)
 8000c58:	f000 fef4 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin | OTG_FS_DM_Pin | OTG_FS_DP_Pin;
 8000c5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000c60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <MX_GPIO_Init+0x288>)
 8000c7a:	f000 fee3 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c7e:	2320      	movs	r3, #32
 8000c80:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c82:	2300      	movs	r3, #0
 8000c84:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_GPIO_Init+0x280>)
 8000c92:	f000 fed7 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin | Audio_SDA_Pin;
 8000c96:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000c9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c9c:	2312      	movs	r3, #18
 8000c9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ca8:	2304      	movs	r3, #4
 8000caa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cac:	f107 031c 	add.w	r3, r7, #28
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <MX_GPIO_Init+0x28c>)
 8000cb4:	f000 fec6 	bl	8001a44 <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	; (8000ce8 <MX_GPIO_Init+0x284>)
 8000cbe:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_GPIO_Init+0x278>)
 8000ccc:	f000 feba 	bl	8001a44 <HAL_GPIO_Init>

}
 8000cd0:	bf00      	nop
 8000cd2:	3730      	adds	r7, #48	; 0x30
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40023800 	.word	0x40023800
 8000cdc:	40021000 	.word	0x40021000
 8000ce0:	40020800 	.word	0x40020800
 8000ce4:	40020c00 	.word	0x40020c00
 8000ce8:	10120000 	.word	0x10120000
 8000cec:	40020000 	.word	0x40020000
 8000cf0:	40020400 	.word	0x40020400

08000cf4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0d      	ldr	r3, [pc, #52]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b09      	ldr	r3, [pc, #36]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a08      	ldr	r2, [pc, #32]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b06      	ldr	r3, [pc, #24]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d3e:	2007      	movs	r0, #7
 8000d40:	f000 face 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800

08000d50 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	; 0x28
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
 8000d62:	609a      	str	r2, [r3, #8]
 8000d64:	60da      	str	r2, [r3, #12]
 8000d66:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a62      	ldr	r2, [pc, #392]	; (8000ef8 <HAL_I2S_MspInit+0x1a8>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	f040 80be 	bne.w	8000ef0 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b60      	ldr	r3, [pc, #384]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	4a5f      	ldr	r2, [pc, #380]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000d7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d82:	6413      	str	r3, [r2, #64]	; 0x40
 8000d84:	4b5d      	ldr	r3, [pc, #372]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	4b59      	ldr	r3, [pc, #356]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a58      	ldr	r2, [pc, #352]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000d9a:	f043 0304 	orr.w	r3, r3, #4
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b56      	ldr	r3, [pc, #344]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0304 	and.w	r3, r3, #4
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dac:	2300      	movs	r3, #0
 8000dae:	60bb      	str	r3, [r7, #8]
 8000db0:	4b52      	ldr	r3, [pc, #328]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	4a51      	ldr	r2, [pc, #324]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000db6:	f043 0302 	orr.w	r3, r3, #2
 8000dba:	6313      	str	r3, [r2, #48]	; 0x30
 8000dbc:	4b4f      	ldr	r3, [pc, #316]	; (8000efc <HAL_I2S_MspInit+0x1ac>)
 8000dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc0:	f003 0302 	and.w	r3, r3, #2
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000dd8:	2306      	movs	r3, #6
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	4847      	ldr	r0, [pc, #284]	; (8000f00 <HAL_I2S_MspInit+0x1b0>)
 8000de4:	f000 fe2e 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin|GPIO_PIN_6;
 8000de8:	2348      	movs	r3, #72	; 0x48
 8000dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	2303      	movs	r3, #3
 8000df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df8:	2305      	movs	r3, #5
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	483f      	ldr	r0, [pc, #252]	; (8000f00 <HAL_I2S_MspInit+0x1b0>)
 8000e04:	f000 fe1e 	bl	8001a44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e08:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e16:	2303      	movs	r3, #3
 8000e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e1a:	2305      	movs	r3, #5
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 0314 	add.w	r3, r7, #20
 8000e22:	4619      	mov	r1, r3
 8000e24:	4837      	ldr	r0, [pc, #220]	; (8000f04 <HAL_I2S_MspInit+0x1b4>)
 8000e26:	f000 fe0d 	bl	8001a44 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000e2a:	4b37      	ldr	r3, [pc, #220]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e2c:	4a37      	ldr	r2, [pc, #220]	; (8000f0c <HAL_I2S_MspInit+0x1bc>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e30:	4b35      	ldr	r3, [pc, #212]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e32:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e36:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e4a:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e4c:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e52:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e5a:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000e5c:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e5e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e62:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8000e64:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e6a:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000e72:	4825      	ldr	r0, [pc, #148]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e74:	f000 fa76 	bl	8001364 <HAL_DMA_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8000e7e:	f7ff ff39 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a20      	ldr	r2, [pc, #128]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e88:	4a1f      	ldr	r2, [pc, #124]	; (8000f08 <HAL_I2S_MspInit+0x1b8>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000e90:	4a20      	ldr	r2, [pc, #128]	; (8000f14 <HAL_I2S_MspInit+0x1c4>)
 8000e92:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e9a:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000e9c:	2240      	movs	r2, #64	; 0x40
 8000e9e:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ea6:	4b1a      	ldr	r3, [pc, #104]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ea8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eac:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000eb4:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eb6:	4b16      	ldr	r3, [pc, #88]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000eb8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ebc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ec0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ec4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000ec6:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ec8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ecc:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000ed4:	480e      	ldr	r0, [pc, #56]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ed6:	f000 fa45 	bl	8001364 <HAL_DMA_Init>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8000ee0:	f7ff ff08 	bl	8000cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000ee8:	639a      	str	r2, [r3, #56]	; 0x38
 8000eea:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <HAL_I2S_MspInit+0x1c0>)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	3728      	adds	r7, #40	; 0x28
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40003800 	.word	0x40003800
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020800 	.word	0x40020800
 8000f04:	40020400 	.word	0x40020400
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	40026058 	.word	0x40026058
 8000f10:	200000ec 	.word	0x200000ec
 8000f14:	40026070 	.word	0x40026070

08000f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <NMI_Handler+0x4>

08000f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1e:	b480      	push	{r7}
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f22:	e7fe      	b.n	8000f22 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <BusFault_Handler+0x4>

08000f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <UsageFault_Handler+0x4>

08000f36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f8a8 	bl	80010b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000f70:	4802      	ldr	r0, [pc, #8]	; (8000f7c <DMA1_Stream3_IRQHandler+0x10>)
 8000f72:	f000 fafd 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	2000008c 	.word	0x2000008c

08000f80 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <DMA1_Stream4_IRQHandler+0x10>)
 8000f86:	f000 faf3 	bl	8001570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	200000ec 	.word	0x200000ec

08000f94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <SystemInit+0x28>)
 8000f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9e:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <SystemInit+0x28>)
 8000fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <SystemInit+0x28>)
 8000faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000fae:	609a      	str	r2, [r3, #8]
#endif
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fc4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fc6:	e003      	b.n	8000fd0 <LoopCopyDataInit>

08000fc8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fcc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fce:	3104      	adds	r1, #4

08000fd0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fd0:	480b      	ldr	r0, [pc, #44]	; (8001000 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fd4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fd8:	d3f6      	bcc.n	8000fc8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fda:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fdc:	e002      	b.n	8000fe4 <LoopFillZerobss>

08000fde <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fde:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fe0:	f842 3b04 	str.w	r3, [r2], #4

08000fe4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fe6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fe8:	d3f9      	bcc.n	8000fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fea:	f7ff ffd3 	bl	8000f94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fee:	f002 fb61 	bl	80036b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ff2:	f7ff fbb5 	bl	8000760 <main>
  bx  lr    
 8000ff6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ffc:	0800374c 	.word	0x0800374c
  ldr  r0, =_sdata
 8001000:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001004:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001008:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 800100c:	2000019c 	.word	0x2000019c

08001010 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001010:	e7fe      	b.n	8001010 <ADC_IRQHandler>
	...

08001014 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <HAL_Init+0x40>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a0d      	ldr	r2, [pc, #52]	; (8001054 <HAL_Init+0x40>)
 800101e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001022:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <HAL_Init+0x40>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a0a      	ldr	r2, [pc, #40]	; (8001054 <HAL_Init+0x40>)
 800102a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <HAL_Init+0x40>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a07      	ldr	r2, [pc, #28]	; (8001054 <HAL_Init+0x40>)
 8001036:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800103a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800103c:	2003      	movs	r0, #3
 800103e:	f000 f94f 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001042:	2000      	movs	r0, #0
 8001044:	f000 f808 	bl	8001058 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001048:	f7ff fe5a 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40023c00 	.word	0x40023c00

08001058 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x54>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <HAL_InitTick+0x58>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f967 	bl	800134a <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f000 f92f 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	; (80010b4 <HAL_InitTick+0x5c>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000
 80010b0:	20000008 	.word	0x20000008
 80010b4:	20000004 	.word	0x20000004

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	; (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000198 	.word	0x20000198

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	; (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	20000198 	.word	0x20000198

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0c      	ldr	r3, [pc, #48]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800116c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	; (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	; (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	; (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	; (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff3e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff8e 	bl	8001234 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5d 	bl	80011e0 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	4603      	mov	r3, r0
 8001336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ff31 	bl	80011a4 <__NVIC_EnableIRQ>
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b082      	sub	sp, #8
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ffa2 	bl	800129c <SysTick_Config>
 8001358:	4603      	mov	r3, r0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001370:	f7ff feb6 	bl	80010e0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e099      	b.n	80014b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2202      	movs	r2, #2
 800138c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f022 0201 	bic.w	r2, r2, #1
 800139e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a0:	e00f      	b.n	80013c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a2:	f7ff fe9d 	bl	80010e0 <HAL_GetTick>
 80013a6:	4602      	mov	r2, r0
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b05      	cmp	r3, #5
 80013ae:	d908      	bls.n	80013c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2220      	movs	r2, #32
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2203      	movs	r2, #3
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e078      	b.n	80014b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d1e8      	bne.n	80013a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	4b38      	ldr	r3, [pc, #224]	; (80014bc <HAL_DMA_Init+0x158>)
 80013dc:	4013      	ands	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	4313      	orrs	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	2b04      	cmp	r3, #4
 800141a:	d107      	bne.n	800142c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	4313      	orrs	r3, r2
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4313      	orrs	r3, r2
 800142a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	697a      	ldr	r2, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f023 0307 	bic.w	r3, r3, #7
 8001442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001452:	2b04      	cmp	r3, #4
 8001454:	d117      	bne.n	8001486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	697a      	ldr	r2, [r7, #20]
 800145c:	4313      	orrs	r3, r2
 800145e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00e      	beq.n	8001486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001468:	6878      	ldr	r0, [r7, #4]
 800146a:	f000 fa6f 	bl	800194c <DMA_CheckFifoParam>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d008      	beq.n	8001486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2240      	movs	r2, #64	; 0x40
 8001478:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2201      	movs	r2, #1
 800147e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001482:	2301      	movs	r3, #1
 8001484:	e016      	b.n	80014b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f000 fa26 	bl	80018e0 <DMA_CalcBaseAndBitshift>
 8001494:	4603      	mov	r3, r0
 8001496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	223f      	movs	r2, #63	; 0x3f
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	f010803f 	.word	0xf010803f

080014c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b086      	sub	sp, #24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_DMA_Start_IT+0x26>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e040      	b.n	8001568 <HAL_DMA_Start_IT+0xa8>
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d12f      	bne.n	800155a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2202      	movs	r2, #2
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	2200      	movs	r2, #0
 8001506:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	68f8      	ldr	r0, [r7, #12]
 8001510:	f000 f9b8 	bl	8001884 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	223f      	movs	r2, #63	; 0x3f
 800151a:	409a      	lsls	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f042 0216 	orr.w	r2, r2, #22
 800152e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	2b00      	cmp	r3, #0
 8001536:	d007      	beq.n	8001548 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0208 	orr.w	r2, r2, #8
 8001546:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	e005      	b.n	8001566 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001562:	2302      	movs	r3, #2
 8001564:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001566:	7dfb      	ldrb	r3, [r7, #23]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800157c:	4b92      	ldr	r3, [pc, #584]	; (80017c8 <HAL_DMA_IRQHandler+0x258>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a92      	ldr	r2, [pc, #584]	; (80017cc <HAL_DMA_IRQHandler+0x25c>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0a9b      	lsrs	r3, r3, #10
 8001588:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800159a:	2208      	movs	r2, #8
 800159c:	409a      	lsls	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d01a      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d013      	beq.n	80015dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0204 	bic.w	r2, r2, #4
 80015c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c8:	2208      	movs	r2, #8
 80015ca:	409a      	lsls	r2, r3
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d4:	f043 0201 	orr.w	r2, r3, #1
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015e0:	2201      	movs	r2, #1
 80015e2:	409a      	lsls	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4013      	ands	r3, r2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d012      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00b      	beq.n	8001612 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2201      	movs	r2, #1
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800160a:	f043 0202 	orr.w	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001616:	2204      	movs	r2, #4
 8001618:	409a      	lsls	r2, r3
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4013      	ands	r3, r2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d012      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d00b      	beq.n	8001648 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001634:	2204      	movs	r2, #4
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001640:	f043 0204 	orr.w	r2, r3, #4
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800164c:	2210      	movs	r2, #16
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d043      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	2b00      	cmp	r3, #0
 8001664:	d03c      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166a:	2210      	movs	r2, #16
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d018      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d108      	bne.n	80016a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d024      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	4798      	blx	r3
 800169e:	e01f      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d01b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	4798      	blx	r3
 80016b0:	e016      	b.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d107      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0208 	bic.w	r2, r2, #8
 80016ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e4:	2220      	movs	r2, #32
 80016e6:	409a      	lsls	r2, r3
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4013      	ands	r3, r2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 808e 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0310 	and.w	r3, r3, #16
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 8086 	beq.w	800180e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001706:	2220      	movs	r2, #32
 8001708:	409a      	lsls	r2, r3
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b05      	cmp	r3, #5
 8001718:	d136      	bne.n	8001788 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0216 	bic.w	r2, r2, #22
 8001728:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001738:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2b00      	cmp	r3, #0
 8001740:	d103      	bne.n	800174a <HAL_DMA_IRQHandler+0x1da>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001746:	2b00      	cmp	r3, #0
 8001748:	d007      	beq.n	800175a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f022 0208 	bic.w	r2, r2, #8
 8001758:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	223f      	movs	r2, #63	; 0x3f
 8001760:	409a      	lsls	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177a:	2b00      	cmp	r3, #0
 800177c:	d07d      	beq.n	800187a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	4798      	blx	r3
        }
        return;
 8001786:	e078      	b.n	800187a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d01c      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d108      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d030      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	4798      	blx	r3
 80017b4:	e02b      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d027      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
 80017c6:	e022      	b.n	800180e <HAL_DMA_IRQHandler+0x29e>
 80017c8:	20000000 	.word	0x20000000
 80017cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d10f      	bne.n	80017fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0210 	bic.w	r2, r2, #16
 80017ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	2b00      	cmp	r3, #0
 8001814:	d032      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d022      	beq.n	8001868 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2205      	movs	r2, #5
 8001826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0201 	bic.w	r2, r2, #1
 8001838:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	3301      	adds	r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	429a      	cmp	r2, r3
 8001844:	d307      	bcc.n	8001856 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1f2      	bne.n	800183a <HAL_DMA_IRQHandler+0x2ca>
 8001854:	e000      	b.n	8001858 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001856:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186c:	2b00      	cmp	r3, #0
 800186e:	d005      	beq.n	800187c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
 8001878:	e000      	b.n	800187c <HAL_DMA_IRQHandler+0x30c>
        return;
 800187a:	bf00      	nop
    }
  }
}
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop

08001884 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	60f8      	str	r0, [r7, #12]
 800188c:	60b9      	str	r1, [r7, #8]
 800188e:	607a      	str	r2, [r7, #4]
 8001890:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80018a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	2b40      	cmp	r3, #64	; 0x40
 80018b0:	d108      	bne.n	80018c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018c2:	e007      	b.n	80018d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68ba      	ldr	r2, [r7, #8]
 80018ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	687a      	ldr	r2, [r7, #4]
 80018d2:	60da      	str	r2, [r3, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	3b10      	subs	r3, #16
 80018f0:	4a14      	ldr	r2, [pc, #80]	; (8001944 <DMA_CalcBaseAndBitshift+0x64>)
 80018f2:	fba2 2303 	umull	r2, r3, r2, r3
 80018f6:	091b      	lsrs	r3, r3, #4
 80018f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <DMA_CalcBaseAndBitshift+0x68>)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	461a      	mov	r2, r3
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b03      	cmp	r3, #3
 800190c:	d909      	bls.n	8001922 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001916:	f023 0303 	bic.w	r3, r3, #3
 800191a:	1d1a      	adds	r2, r3, #4
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	659a      	str	r2, [r3, #88]	; 0x58
 8001920:	e007      	b.n	8001932 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800192a:	f023 0303 	bic.w	r3, r3, #3
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	aaaaaaab 	.word	0xaaaaaaab
 8001948:	08003734 	.word	0x08003734

0800194c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001954:	2300      	movs	r3, #0
 8001956:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800195c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	699b      	ldr	r3, [r3, #24]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d11f      	bne.n	80019a6 <DMA_CheckFifoParam+0x5a>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d856      	bhi.n	8001a1a <DMA_CheckFifoParam+0xce>
 800196c:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DMA_CheckFifoParam+0x28>)
 800196e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001972:	bf00      	nop
 8001974:	08001985 	.word	0x08001985
 8001978:	08001997 	.word	0x08001997
 800197c:	08001985 	.word	0x08001985
 8001980:	08001a1b 	.word	0x08001a1b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d046      	beq.n	8001a1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001994:	e043      	b.n	8001a1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800199e:	d140      	bne.n	8001a22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019a4:	e03d      	b.n	8001a22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ae:	d121      	bne.n	80019f4 <DMA_CheckFifoParam+0xa8>
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	2b03      	cmp	r3, #3
 80019b4:	d837      	bhi.n	8001a26 <DMA_CheckFifoParam+0xda>
 80019b6:	a201      	add	r2, pc, #4	; (adr r2, 80019bc <DMA_CheckFifoParam+0x70>)
 80019b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019bc:	080019cd 	.word	0x080019cd
 80019c0:	080019d3 	.word	0x080019d3
 80019c4:	080019cd 	.word	0x080019cd
 80019c8:	080019e5 	.word	0x080019e5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	73fb      	strb	r3, [r7, #15]
      break;
 80019d0:	e030      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d025      	beq.n	8001a2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019e2:	e022      	b.n	8001a2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019ec:	d11f      	bne.n	8001a2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019f2:	e01c      	b.n	8001a2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d903      	bls.n	8001a02 <DMA_CheckFifoParam+0xb6>
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d003      	beq.n	8001a08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a00:	e018      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	73fb      	strb	r3, [r7, #15]
      break;
 8001a06:	e015      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00e      	beq.n	8001a32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
      break;
 8001a18:	e00b      	b.n	8001a32 <DMA_CheckFifoParam+0xe6>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e00a      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e008      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a22:	bf00      	nop
 8001a24:	e006      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
 8001a28:	e004      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a2a:	bf00      	nop
 8001a2c:	e002      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <DMA_CheckFifoParam+0xe8>
      break;
 8001a32:	bf00      	nop
    }
  } 
  
  return status; 
 8001a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b089      	sub	sp, #36	; 0x24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
 8001a5e:	e16b      	b.n	8001d38 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a60:	2201      	movs	r2, #1
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	697a      	ldr	r2, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	f040 815a 	bne.w	8001d32 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d00b      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d003      	beq.n	8001a9e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	2b12      	cmp	r3, #18
 8001a9c:	d130      	bne.n	8001b00 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	43db      	mvns	r3, r3
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	091b      	lsrs	r3, r3, #4
 8001aea:	f003 0201 	and.w	r2, r3, #1
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0xfc>
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	2b12      	cmp	r3, #18
 8001b3e:	d123      	bne.n	8001b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	08da      	lsrs	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3208      	adds	r2, #8
 8001b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	220f      	movs	r2, #15
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	43db      	mvns	r3, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4013      	ands	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	691a      	ldr	r2, [r3, #16]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0307 	and.w	r3, r3, #7
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	08da      	lsrs	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	3208      	adds	r2, #8
 8001b82:	69b9      	ldr	r1, [r7, #24]
 8001b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	2203      	movs	r2, #3
 8001b94:	fa02 f303 	lsl.w	r3, r2, r3
 8001b98:	43db      	mvns	r3, r3
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	005b      	lsls	r3, r3, #1
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80b4 	beq.w	8001d32 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60fb      	str	r3, [r7, #12]
 8001bce:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	4a5f      	ldr	r2, [pc, #380]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001bda:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_GPIO_Init+0x30c>)
 8001bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001be6:	4a5b      	ldr	r2, [pc, #364]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	3302      	adds	r3, #2
 8001bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a52      	ldr	r2, [pc, #328]	; (8001d58 <HAL_GPIO_Init+0x314>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d02b      	beq.n	8001c6a <HAL_GPIO_Init+0x226>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a51      	ldr	r2, [pc, #324]	; (8001d5c <HAL_GPIO_Init+0x318>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d025      	beq.n	8001c66 <HAL_GPIO_Init+0x222>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a50      	ldr	r2, [pc, #320]	; (8001d60 <HAL_GPIO_Init+0x31c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d01f      	beq.n	8001c62 <HAL_GPIO_Init+0x21e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4f      	ldr	r2, [pc, #316]	; (8001d64 <HAL_GPIO_Init+0x320>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d019      	beq.n	8001c5e <HAL_GPIO_Init+0x21a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4e      	ldr	r2, [pc, #312]	; (8001d68 <HAL_GPIO_Init+0x324>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d013      	beq.n	8001c5a <HAL_GPIO_Init+0x216>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a4d      	ldr	r2, [pc, #308]	; (8001d6c <HAL_GPIO_Init+0x328>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00d      	beq.n	8001c56 <HAL_GPIO_Init+0x212>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a4c      	ldr	r2, [pc, #304]	; (8001d70 <HAL_GPIO_Init+0x32c>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x20e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a4b      	ldr	r2, [pc, #300]	; (8001d74 <HAL_GPIO_Init+0x330>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d101      	bne.n	8001c4e <HAL_GPIO_Init+0x20a>
 8001c4a:	2307      	movs	r3, #7
 8001c4c:	e00e      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c4e:	2308      	movs	r3, #8
 8001c50:	e00c      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c52:	2306      	movs	r3, #6
 8001c54:	e00a      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c56:	2305      	movs	r3, #5
 8001c58:	e008      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	e006      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e004      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c62:	2302      	movs	r3, #2
 8001c64:	e002      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c66:	2301      	movs	r3, #1
 8001c68:	e000      	b.n	8001c6c <HAL_GPIO_Init+0x228>
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	69fa      	ldr	r2, [r7, #28]
 8001c6e:	f002 0203 	and.w	r2, r2, #3
 8001c72:	0092      	lsls	r2, r2, #2
 8001c74:	4093      	lsls	r3, r2
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c7c:	4935      	ldr	r1, [pc, #212]	; (8001d54 <HAL_GPIO_Init+0x310>)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	089b      	lsrs	r3, r3, #2
 8001c82:	3302      	adds	r3, #2
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c8a:	4b3b      	ldr	r3, [pc, #236]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	43db      	mvns	r3, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4013      	ands	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d003      	beq.n	8001cae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4313      	orrs	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cae:	4a32      	ldr	r2, [pc, #200]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cb4:	4b30      	ldr	r3, [pc, #192]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd8:	4a27      	ldr	r2, [pc, #156]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d02:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d08:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d003      	beq.n	8001d2c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d2c:	4a12      	ldr	r2, [pc, #72]	; (8001d78 <HAL_GPIO_Init+0x334>)
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3301      	adds	r3, #1
 8001d36:	61fb      	str	r3, [r7, #28]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	f67f ae90 	bls.w	8001a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d40:	bf00      	nop
 8001d42:	bf00      	nop
 8001d44:	3724      	adds	r7, #36	; 0x24
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40013800 	.word	0x40013800
 8001d58:	40020000 	.word	0x40020000
 8001d5c:	40020400 	.word	0x40020400
 8001d60:	40020800 	.word	0x40020800
 8001d64:	40020c00 	.word	0x40020c00
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	40021400 	.word	0x40021400
 8001d70:	40021800 	.word	0x40021800
 8001d74:	40021c00 	.word	0x40021c00
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	807b      	strh	r3, [r7, #2]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d8c:	787b      	ldrb	r3, [r7, #1]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d92:	887a      	ldrh	r2, [r7, #2]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d98:	e003      	b.n	8001da2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9a:	887b      	ldrh	r3, [r7, #2]
 8001d9c:	041a      	lsls	r2, r3, #16
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	619a      	str	r2, [r3, #24]
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b088      	sub	sp, #32
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e128      	b.n	8002014 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d109      	bne.n	8001de2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a90      	ldr	r2, [pc, #576]	; (800201c <HAL_I2S_Init+0x26c>)
 8001dda:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7fe ffb7 	bl	8000d50 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2202      	movs	r2, #2
 8001de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	69db      	ldr	r3, [r3, #28]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001df8:	f023 030f 	bic.w	r3, r3, #15
 8001dfc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2202      	movs	r2, #2
 8001e04:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d060      	beq.n	8001ed0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001e16:	2310      	movs	r3, #16
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	e001      	b.n	8001e20 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001e1c:	2320      	movs	r3, #32
 8001e1e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	2b20      	cmp	r3, #32
 8001e26:	d802      	bhi.n	8001e2e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f001 fbe2 	bl	80035f8 <HAL_RCCEx_GetPeriphCLKFreq>
 8001e34:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3e:	d125      	bne.n	8001e8c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e64:	3305      	adds	r3, #5
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e01f      	b.n	8001eaa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	00db      	lsls	r3, r3, #3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e74:	4613      	mov	r3, r2
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	4413      	add	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	461a      	mov	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e86:	3305      	adds	r3, #5
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	e00e      	b.n	8001eaa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	3305      	adds	r3, #5
 8001ea8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_I2S_Init+0x270>)
 8001eae:	fba2 2303 	umull	r2, r3, r2, r3
 8001eb2:	08db      	lsrs	r3, r3, #3
 8001eb4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	021b      	lsls	r3, r3, #8
 8001ecc:	61bb      	str	r3, [r7, #24]
 8001ece:	e003      	b.n	8001ed8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d902      	bls.n	8001ee4 <HAL_I2S_Init+0x134>
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	2bff      	cmp	r3, #255	; 0xff
 8001ee2:	d907      	bls.n	8001ef4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee8:	f043 0210 	orr.w	r2, r3, #16
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e08f      	b.n	8002014 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	691a      	ldr	r2, [r3, #16]
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	ea42 0103 	orr.w	r1, r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69fa      	ldr	r2, [r7, #28]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f12:	f023 030f 	bic.w	r3, r3, #15
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	6851      	ldr	r1, [r2, #4]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6892      	ldr	r2, [r2, #8]
 8001f1e:	4311      	orrs	r1, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	68d2      	ldr	r2, [r2, #12]
 8001f24:	4311      	orrs	r1, r2
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6992      	ldr	r2, [r2, #24]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f36:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a1b      	ldr	r3, [r3, #32]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d161      	bne.n	8002004 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a38      	ldr	r2, [pc, #224]	; (8002024 <HAL_I2S_Init+0x274>)
 8001f44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a37      	ldr	r2, [pc, #220]	; (8002028 <HAL_I2S_Init+0x278>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_I2S_Init+0x1a4>
 8001f50:	4b36      	ldr	r3, [pc, #216]	; (800202c <HAL_I2S_Init+0x27c>)
 8001f52:	e001      	b.n	8001f58 <HAL_I2S_Init+0x1a8>
 8001f54:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	4932      	ldr	r1, [pc, #200]	; (8002028 <HAL_I2S_Init+0x278>)
 8001f60:	428a      	cmp	r2, r1
 8001f62:	d101      	bne.n	8001f68 <HAL_I2S_Init+0x1b8>
 8001f64:	4a31      	ldr	r2, [pc, #196]	; (800202c <HAL_I2S_Init+0x27c>)
 8001f66:	e001      	b.n	8001f6c <HAL_I2S_Init+0x1bc>
 8001f68:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001f6c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001f70:	f023 030f 	bic.w	r3, r3, #15
 8001f74:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2b      	ldr	r2, [pc, #172]	; (8002028 <HAL_I2S_Init+0x278>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d101      	bne.n	8001f84 <HAL_I2S_Init+0x1d4>
 8001f80:	4b2a      	ldr	r3, [pc, #168]	; (800202c <HAL_I2S_Init+0x27c>)
 8001f82:	e001      	b.n	8001f88 <HAL_I2S_Init+0x1d8>
 8001f84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f88:	2202      	movs	r2, #2
 8001f8a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a25      	ldr	r2, [pc, #148]	; (8002028 <HAL_I2S_Init+0x278>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_I2S_Init+0x1ea>
 8001f96:	4b25      	ldr	r3, [pc, #148]	; (800202c <HAL_I2S_Init+0x27c>)
 8001f98:	e001      	b.n	8001f9e <HAL_I2S_Init+0x1ee>
 8001f9a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f9e:	69db      	ldr	r3, [r3, #28]
 8001fa0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001faa:	d003      	beq.n	8001fb4 <HAL_I2S_Init+0x204>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	e001      	b.n	8001fc0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	b299      	uxth	r1, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001fd6:	4303      	orrs	r3, r0
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	430b      	orrs	r3, r1
 8001fdc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	b29a      	uxth	r2, r3
 8001fe2:	897b      	ldrh	r3, [r7, #10]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001fec:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0d      	ldr	r2, [pc, #52]	; (8002028 <HAL_I2S_Init+0x278>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d101      	bne.n	8001ffc <HAL_I2S_Init+0x24c>
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	; (800202c <HAL_I2S_Init+0x27c>)
 8001ffa:	e001      	b.n	8002000 <HAL_I2S_Init+0x250>
 8001ffc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002000:	897a      	ldrh	r2, [r7, #10]
 8002002:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2201      	movs	r2, #1
 800200e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3720      	adds	r7, #32
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	08002127 	.word	0x08002127
 8002020:	cccccccd 	.word	0xcccccccd
 8002024:	08002551 	.word	0x08002551
 8002028:	40003800 	.word	0x40003800
 800202c:	40003400 	.word	0x40003400

08002030 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	881a      	ldrh	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	1c9a      	adds	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208e:	b29b      	uxth	r3, r3
 8002090:	3b01      	subs	r3, #1
 8002092:	b29a      	uxth	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800209c:	b29b      	uxth	r3, r3
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d10e      	bne.n	80020c0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80020b0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffb8 	bl	8002030 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80020c0:	bf00      	nop
 80020c2:	3708      	adds	r7, #8
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68da      	ldr	r2, [r3, #12]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	b292      	uxth	r2, r2
 80020dc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	1c9a      	adds	r2, r3, #2
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020ec:	b29b      	uxth	r3, r3
 80020ee:	3b01      	subs	r3, #1
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10e      	bne.n	800211e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800210e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff93 	bl	8002044 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b04      	cmp	r3, #4
 8002140:	d13a      	bne.n	80021b8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b01      	cmp	r3, #1
 800214a:	d109      	bne.n	8002160 <I2S_IRQHandler+0x3a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d102      	bne.n	8002160 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffb4 	bl	80020c8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002166:	2b40      	cmp	r3, #64	; 0x40
 8002168:	d126      	bne.n	80021b8 <I2S_IRQHandler+0x92>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0320 	and.w	r3, r3, #32
 8002174:	2b20      	cmp	r3, #32
 8002176:	d11f      	bne.n	80021b8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002186:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f043 0202 	orr.w	r2, r3, #2
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff50 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	2b03      	cmp	r3, #3
 80021c2:	d136      	bne.n	8002232 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d109      	bne.n	80021e2 <I2S_IRQHandler+0xbc>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021d8:	2b80      	cmp	r3, #128	; 0x80
 80021da:	d102      	bne.n	80021e2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff45 	bl	800206c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 0308 	and.w	r3, r3, #8
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d122      	bne.n	8002232 <I2S_IRQHandler+0x10c>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b20      	cmp	r3, #32
 80021f8:	d11b      	bne.n	8002232 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002208:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	60fb      	str	r3, [r7, #12]
 8002216:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff ff13 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002232:	bf00      	nop
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <HAL_I2SEx_TransmitReceive_DMA>:
 *         between Master and Slave(example: audio streaming).
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
		uint16_t Size)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
 8002248:	807b      	strh	r3, [r7, #2]
	uint32_t *tmp = NULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61bb      	str	r3, [r7, #24]
	uint32_t tmp1 = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
	HAL_StatusTypeDef errorcode = HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	77fb      	strb	r3, [r7, #31]

	if (hi2s->State != HAL_I2S_STATE_READY)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d002      	beq.n	8002268 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
	{
		errorcode = HAL_BUSY;
 8002262:	2302      	movs	r3, #2
 8002264:	77fb      	strb	r3, [r7, #31]
		goto error;
 8002266:	e160      	b.n	800252a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
	}

	if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d005      	beq.n	800227a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2SEx_TransmitReceive_DMA+0x42>
	{
		return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e15a      	b.n	8002534 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
	}

	/* Process Locked */
	__HAL_LOCK(hi2s);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b01      	cmp	r3, #1
 8002288:	d101      	bne.n	800228e <HAL_I2SEx_TransmitReceive_DMA+0x52>
 800228a:	2302      	movs	r3, #2
 800228c:	e152      	b.n	8002534 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hi2s->pTxBuffPtr = pTxData;
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
	hi2s->pRxBuffPtr = pRxData;
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	62da      	str	r2, [r3, #44]	; 0x2c

	tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	617b      	str	r3, [r7, #20]
	/* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
	 is selected during the I2S configuration phase, the Size parameter means the number
	 of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
	 frame is selected the Size parameter means the number of 16-bit data length. */
	if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	2b03      	cmp	r3, #3
 80022b2:	d002      	beq.n	80022ba <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	2b05      	cmp	r3, #5
 80022b8:	d114      	bne.n	80022e4 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
	{
		hi2s->TxXferSize = (Size << 1U);
 80022ba:	887b      	ldrh	r3, [r7, #2]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = (Size << 1U);
 80022c4:	887b      	ldrh	r3, [r7, #2]
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2s->RxXferSize = (Size << 1U);
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	861a      	strh	r2, [r3, #48]	; 0x30
		hi2s->RxXferCount = (Size << 1U);
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	865a      	strh	r2, [r3, #50]	; 0x32
 80022e2:	e00b      	b.n	80022fc <HAL_I2SEx_TransmitReceive_DMA+0xc0>
	}
	else
	{
		hi2s->TxXferSize = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	887a      	ldrh	r2, [r7, #2]
 80022e8:	851a      	strh	r2, [r3, #40]	; 0x28
		hi2s->TxXferCount = Size;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	887a      	ldrh	r2, [r7, #2]
 80022ee:	855a      	strh	r2, [r3, #42]	; 0x2a
		hi2s->RxXferSize = Size;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	861a      	strh	r2, [r3, #48]	; 0x30
		hi2s->RxXferCount = Size;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	887a      	ldrh	r2, [r7, #2]
 80022fa:	865a      	strh	r2, [r3, #50]	; 0x32
	}

	hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	645a      	str	r2, [r3, #68]	; 0x44
	hi2s->State = HAL_I2S_STATE_BUSY_TX_RX;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2205      	movs	r2, #5
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Set the I2S Rx DMA Half transfer complete callback */
	hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	4a8b      	ldr	r2, [pc, #556]	; (800253c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002310:	641a      	str	r2, [r3, #64]	; 0x40

	/* Set the I2S Rx DMA transfer complete callback */
	hi2s->hdmarx->XferCpltCallback = I2SEx_TxRxDMACplt;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002316:	4a8a      	ldr	r2, [pc, #552]	; (8002540 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002318:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Set the I2S Rx DMA error callback */
	hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	4a89      	ldr	r2, [pc, #548]	; (8002544 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002320:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Set the I2S Tx DMA Half transfer complete callback */
	hi2s->hdmatx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	4a85      	ldr	r2, [pc, #532]	; (800253c <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002328:	641a      	str	r2, [r3, #64]	; 0x40

	/* Set the I2S Tx DMA transfer complete callback */
	hi2s->hdmatx->XferCpltCallback = I2SEx_TxRxDMACplt;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232e:	4a84      	ldr	r2, [pc, #528]	; (8002540 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002330:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Set the I2S Tx DMA error callback */
	hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	4a83      	ldr	r2, [pc, #524]	; (8002544 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002338:	64da      	str	r2, [r3, #76]	; 0x4c

	tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	69db      	ldr	r3, [r3, #28]
 8002340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002344:	617b      	str	r3, [r7, #20]
	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800234c:	d002      	beq.n	8002354 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d16b      	bne.n	800242c <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
	{
		/* Enable the Rx DMA Stream */
		tmp = (uint32_t*) &pRxData;
 8002354:	1d3b      	adds	r3, r7, #4
 8002356:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t) &I2SxEXT(hi2s->Instance)->DR, *(uint32_t*) tmp, hi2s->RxXferSize);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a79      	ldr	r2, [pc, #484]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002366:	4b79      	ldr	r3, [pc, #484]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002368:	e001      	b.n	800236e <HAL_I2SEx_TransmitReceive_DMA+0x132>
 800236a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800236e:	330c      	adds	r3, #12
 8002370:	4619      	mov	r1, r3
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800237a:	b29b      	uxth	r3, r3
 800237c:	f7ff f8a0 	bl	80014c0 <HAL_DMA_Start_IT>

		/* Enable Rx DMA Request */
		SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a70      	ldr	r2, [pc, #448]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d101      	bne.n	800238e <HAL_I2SEx_TransmitReceive_DMA+0x152>
 800238a:	4b70      	ldr	r3, [pc, #448]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800238c:	e001      	b.n	8002392 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 800238e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	496b      	ldr	r1, [pc, #428]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800239a:	428b      	cmp	r3, r1
 800239c:	d101      	bne.n	80023a2 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 800239e:	4b6b      	ldr	r3, [pc, #428]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023a0:	e001      	b.n	80023a6 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80023a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023a6:	f042 0201 	orr.w	r2, r2, #1
 80023aa:	605a      	str	r2, [r3, #4]

		/* Enable the Tx DMA Stream */
		tmp = (uint32_t*) &pTxData;
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*) tmp, (uint32_t) &hi2s->Instance->DR, hi2s->TxXferSize);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	6819      	ldr	r1, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330c      	adds	r3, #12
 80023c0:	461a      	mov	r2, r3
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f7ff f87a 	bl	80014c0 <HAL_DMA_Start_IT>

		/* Enable Tx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f042 0202 	orr.w	r2, r2, #2
 80023da:	605a      	str	r2, [r3, #4]

		/* Check if the I2S is already enabled */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ea:	f000 809e 	beq.w	800252a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		{
			/* Enable I2Sext(receiver) before enabling I2Sx peripheral */
			__HAL_I2SEXT_ENABLE(hi2s);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a55      	ldr	r2, [pc, #340]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d101      	bne.n	80023fc <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80023f8:	4b54      	ldr	r3, [pc, #336]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80023fa:	e001      	b.n	8002400 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80023fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002400:	69da      	ldr	r2, [r3, #28]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4950      	ldr	r1, [pc, #320]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002408:	428b      	cmp	r3, r1
 800240a:	d101      	bne.n	8002410 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800240e:	e001      	b.n	8002414 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002410:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002414:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002418:	61da      	str	r2, [r3, #28]

			/* Enable I2S peripheral after the I2Sext */
			__HAL_I2S_ENABLE(hi2s);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	69da      	ldr	r2, [r3, #28]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002428:	61da      	str	r2, [r3, #28]
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800242a:	e07e      	b.n	800252a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		}
	}
	else
	{
		/* Check if Master Receiver mode is selected */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002436:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800243a:	d10a      	bne.n	8002452 <HAL_I2SEx_TransmitReceive_DMA+0x216>
		{
			/* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
			 access to the SPI_SR register. */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	613b      	str	r3, [r7, #16]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	613b      	str	r3, [r7, #16]
 8002450:	693b      	ldr	r3, [r7, #16]
		}
		/* Enable the Tx DMA Stream */
		tmp = (uint32_t*) &pTxData;
 8002452:	f107 0308 	add.w	r3, r7, #8
 8002456:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t*) tmp, (uint32_t) &I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	6819      	ldr	r1, [r3, #0]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a38      	ldr	r2, [pc, #224]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_I2SEx_TransmitReceive_DMA+0x232>
 800246a:	4b38      	ldr	r3, [pc, #224]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800246c:	e001      	b.n	8002472 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 800246e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002472:	330c      	adds	r3, #12
 8002474:	461a      	mov	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247a:	b29b      	uxth	r3, r3
 800247c:	f7ff f820 	bl	80014c0 <HAL_DMA_Start_IT>

		/* Enable Tx DMA Request */
		SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a30      	ldr	r2, [pc, #192]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_I2SEx_TransmitReceive_DMA+0x252>
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800248c:	e001      	b.n	8002492 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 800248e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002492:	685a      	ldr	r2, [r3, #4]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	492b      	ldr	r1, [pc, #172]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800249a:	428b      	cmp	r3, r1
 800249c:	d101      	bne.n	80024a2 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 800249e:	4b2b      	ldr	r3, [pc, #172]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024a0:	e001      	b.n	80024a6 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80024a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024a6:	f042 0202 	orr.w	r2, r2, #2
 80024aa:	605a      	str	r2, [r3, #4]

		/* Enable the Rx DMA Stream */
		tmp = (uint32_t*) &pRxData;
 80024ac:	1d3b      	adds	r3, r7, #4
 80024ae:	61bb      	str	r3, [r7, #24]
		HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t) &hi2s->Instance->DR, *(uint32_t*) tmp, hi2s->RxXferSize);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	330c      	adds	r3, #12
 80024ba:	4619      	mov	r1, r3
 80024bc:	69bb      	ldr	r3, [r7, #24]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f7fe fffb 	bl	80014c0 <HAL_DMA_Start_IT>

		/* Enable Rx DMA Request */
		SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f042 0201 	orr.w	r2, r2, #1
 80024d8:	605a      	str	r2, [r3, #4]

		/* Check if the I2S is already enabled */
		if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e8:	d01e      	beq.n	8002528 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
		{
			/* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
			__HAL_I2SEXT_ENABLE(hi2s);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80024f6:	e001      	b.n	80024fc <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80024f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4911      	ldr	r1, [pc, #68]	; (8002548 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d101      	bne.n	800250c <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002508:	4b10      	ldr	r3, [pc, #64]	; (800254c <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800250a:	e001      	b.n	8002510 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 800250c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002510:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002514:	61da      	str	r2, [r3, #28]
			/* Enable I2S peripheral before the I2Sext */
			__HAL_I2S_ENABLE(hi2s);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	69da      	ldr	r2, [r3, #28]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002524:	61da      	str	r2, [r3, #28]
 8002526:	e000      	b.n	800252a <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
		}
	}

	error:
 8002528:	bf00      	nop
	__HAL_UNLOCK(hi2s);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	return errorcode;
 8002532:	7ffb      	ldrb	r3, [r7, #31]
}
 8002534:	4618      	mov	r0, r3
 8002536:	3720      	adds	r7, #32
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	080027f9 	.word	0x080027f9
 8002540:	08002815 	.word	0x08002815
 8002544:	0800294d 	.word	0x0800294d
 8002548:	40003800 	.word	0x40003800
 800254c:	40003400 	.word	0x40003400

08002550 <HAL_I2SEx_FullDuplex_IRQHandler>:
 * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
 * @param  hi2s I2S handle
 * @retval HAL status
 */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b088      	sub	sp, #32
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	__IO uint32_t i2ssr = hi2s->Instance->SR;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	61fb      	str	r3, [r7, #28]
	__IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4aa2      	ldr	r2, [pc, #648]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800256a:	4ba2      	ldr	r3, [pc, #648]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800256c:	e001      	b.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800256e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	61bb      	str	r3, [r7, #24]
	__IO uint32_t i2scr2 = hi2s->Instance->CR2;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	617b      	str	r3, [r7, #20]
	__IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a9b      	ldr	r2, [pc, #620]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002588:	4b9a      	ldr	r3, [pc, #616]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800258a:	e001      	b.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800258c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	613b      	str	r3, [r7, #16]

	/* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
	if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800259c:	d004      	beq.n	80025a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	f040 8099 	bne.w	80026da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
	{
		/* I2S in mode Transmitter -------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d107      	bne.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2S(hi2s);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fa05 	bl	80029cc <I2SEx_TxISR_I2S>
		}

		/* I2Sext in mode Receiver -----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d107      	bne.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
			 the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2SExt(hi2s);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 faa8 	bl	8002b2c <I2SEx_RxISR_I2SExt>
		}

		/* I2Sext Overrun error interrupt occurred --------------------------------*/
		if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d13a      	bne.n	800265c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	f003 0320 	and.w	r3, r3, #32
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d035      	beq.n	800265c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
		{
			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a7e      	ldr	r2, [pc, #504]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d101      	bne.n	80025fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80025fa:	4b7e      	ldr	r3, [pc, #504]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80025fc:	e001      	b.n	8002602 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80025fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4979      	ldr	r1, [pc, #484]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800260a:	428b      	cmp	r3, r1
 800260c:	d101      	bne.n	8002612 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800260e:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002610:	e001      	b.n	8002616 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002612:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002616:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800261a:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800262a:	605a      	str	r2, [r3, #4]

			/* Clear Overrun flag */
			__HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800262c:	2300      	movs	r3, #0
 800262e:	60fb      	str	r3, [r7, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	f043 0202 	orr.w	r2, r3, #2
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f7ff fcfe 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2S Underrun error interrupt occurred ----------------------------------*/
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	f040 80be 	bne.w	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 80b8 	beq.w	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
		{
			/* Disable TXE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	685a      	ldr	r2, [r3, #4]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002682:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a59      	ldr	r2, [pc, #356]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800268e:	4b59      	ldr	r3, [pc, #356]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002690:	e001      	b.n	8002696 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002692:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002696:	685a      	ldr	r2, [r3, #4]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4954      	ldr	r1, [pc, #336]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800269e:	428b      	cmp	r3, r1
 80026a0:	d101      	bne.n	80026a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80026a2:	4b54      	ldr	r3, [pc, #336]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80026a4:	e001      	b.n	80026aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80026a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80026aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ae:	605a      	str	r2, [r3, #4]

			/* Clear underrun flag */
			__HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80026b0:	2300      	movs	r3, #0
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff fcc0 	bl	8002058 <HAL_I2S_ErrorCallback>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80026d8:	e084      	b.n	80027e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
	}
	/* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
	else
	{
		/* I2Sext in mode Transmitter ----------------------------------------------*/
		if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0302 	and.w	r3, r3, #2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d107      	bne.n	80026f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
			I2SEx_TxISR_I2SExt(hi2s);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f99e 	bl	8002a30 <I2SEx_TxISR_I2SExt>
		}

		/* I2S in mode Receiver --------------------------------------------------*/
		if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d107      	bne.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
		{
			/* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
			 the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
			I2SEx_RxISR_I2S(hi2s);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f9dd 	bl	8002ac8 <I2SEx_RxISR_I2S>
		}

		/* I2S Overrun error interrupt occurred -------------------------------------*/
		if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d12f      	bne.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f003 0320 	and.w	r3, r3, #32
 800271e:	2b00      	cmp	r3, #0
 8002720:	d02a      	beq.n	8002778 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
		{
			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002730:	605a      	str	r2, [r3, #4]

			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d101      	bne.n	8002740 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800273e:	e001      	b.n	8002744 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002740:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002744:	685a      	ldr	r2, [r3, #4]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4929      	ldr	r1, [pc, #164]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800274c:	428b      	cmp	r3, r1
 800274e:	d101      	bne.n	8002754 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002750:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002752:	e001      	b.n	8002758 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002754:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002758:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800275c:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff fc70 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}

		/* I2Sext Underrun error interrupt occurred -------------------------------*/
		if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002778:	69bb      	ldr	r3, [r7, #24]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d131      	bne.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02c      	beq.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
		{
			/* Disable TXE and ERR interrupt */
			__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d101      	bne.n	800279a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002796:	4b17      	ldr	r3, [pc, #92]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002798:	e001      	b.n	800279e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800279a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4912      	ldr	r1, [pc, #72]	; (80027f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80027a6:	428b      	cmp	r3, r1
 80027a8:	d101      	bne.n	80027ae <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80027aa:	4b12      	ldr	r3, [pc, #72]	; (80027f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80027ac:	e001      	b.n	80027b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80027ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80027b6:	605a      	str	r2, [r3, #4]

			/* Disable RXNE and ERR interrupt */
			__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80027c6:	605a      	str	r2, [r3, #4]

			/* Set the I2S State ready */
			hi2s->State = HAL_I2S_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

			/* Set the error code and execute error callback*/
			SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0204 	orr.w	r2, r3, #4
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44
			/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
			HAL_I2S_ErrorCallback(hi2s);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f7ff fc3b 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 80027e2:	e000      	b.n	80027e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
		if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80027e4:	bf00      	nop
}
 80027e6:	bf00      	nop
 80027e8:	3720      	adds	r7, #32
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40003800 	.word	0x40003800
 80027f4:	40003400 	.word	0x40003400

080027f8 <I2SEx_TxRxDMAHalfCplt>:
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002804:	60fb      	str	r3, [r7, #12]

	/* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
	HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f7fd ff2a 	bl	8000660 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800280c:	bf00      	nop
 800280e:	3710      	adds	r7, #16
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <I2SEx_TxRxDMACplt>:
 * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA module.
 * @retval None
 */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	60fb      	str	r3, [r7, #12]

	/* if DMA is configured in DMA_NORMAL mode */
	if (hdma->Init.Mode == DMA_NORMAL)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	2b00      	cmp	r3, #0
 8002828:	f040 8084 	bne.w	8002934 <I2SEx_TxRxDMACplt+0x120>
	{
		if (hi2s->hdmarx == hdma)
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	429a      	cmp	r2, r3
 8002834:	d13c      	bne.n	80028b0 <I2SEx_TxRxDMACplt+0x9c>
		{
			/* Disable Rx DMA Request */
			if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002840:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002844:	d006      	beq.n	8002854 <I2SEx_TxRxDMACplt+0x40>
					|| ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002850:	2b00      	cmp	r3, #0
 8002852:	d116      	bne.n	8002882 <I2SEx_TxRxDMACplt+0x6e>
			{
				CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a3a      	ldr	r2, [pc, #232]	; (8002944 <I2SEx_TxRxDMACplt+0x130>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d101      	bne.n	8002862 <I2SEx_TxRxDMACplt+0x4e>
 800285e:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <I2SEx_TxRxDMACplt+0x134>)
 8002860:	e001      	b.n	8002866 <I2SEx_TxRxDMACplt+0x52>
 8002862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002866:	685a      	ldr	r2, [r3, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4935      	ldr	r1, [pc, #212]	; (8002944 <I2SEx_TxRxDMACplt+0x130>)
 800286e:	428b      	cmp	r3, r1
 8002870:	d101      	bne.n	8002876 <I2SEx_TxRxDMACplt+0x62>
 8002872:	4b35      	ldr	r3, [pc, #212]	; (8002948 <I2SEx_TxRxDMACplt+0x134>)
 8002874:	e001      	b.n	800287a <I2SEx_TxRxDMACplt+0x66>
 8002876:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800287a:	f022 0201 	bic.w	r2, r2, #1
 800287e:	605a      	str	r2, [r3, #4]
 8002880:	e007      	b.n	8002892 <I2SEx_TxRxDMACplt+0x7e>
			}
			else
			{
				CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685a      	ldr	r2, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0201 	bic.w	r2, r2, #1
 8002890:	605a      	str	r2, [r3, #4]
			}

			hi2s->RxXferCount = 0U;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	865a      	strh	r2, [r3, #50]	; 0x32

			if (hi2s->TxXferCount == 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <I2SEx_TxRxDMACplt+0x9c>
			{
				hi2s->State = HAL_I2S_STATE_READY;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
				HAL_I2SEx_TxRxCpltCallback(hi2s);
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f7fd ff18 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
			}
		}

		if (hi2s->hdmatx == hdma)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d13c      	bne.n	8002934 <I2SEx_TxRxDMACplt+0x120>
		{
			/* Disable Tx DMA Request */
			if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	69db      	ldr	r3, [r3, #28]
 80028c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c8:	d006      	beq.n	80028d8 <I2SEx_TxRxDMACplt+0xc4>
					|| ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d108      	bne.n	80028ea <I2SEx_TxRxDMACplt+0xd6>
			{
				CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0202 	bic.w	r2, r2, #2
 80028e6:	605a      	str	r2, [r3, #4]
 80028e8:	e015      	b.n	8002916 <I2SEx_TxRxDMACplt+0x102>
			}
			else
			{
				CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a15      	ldr	r2, [pc, #84]	; (8002944 <I2SEx_TxRxDMACplt+0x130>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d101      	bne.n	80028f8 <I2SEx_TxRxDMACplt+0xe4>
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <I2SEx_TxRxDMACplt+0x134>)
 80028f6:	e001      	b.n	80028fc <I2SEx_TxRxDMACplt+0xe8>
 80028f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028fc:	685a      	ldr	r2, [r3, #4]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4910      	ldr	r1, [pc, #64]	; (8002944 <I2SEx_TxRxDMACplt+0x130>)
 8002904:	428b      	cmp	r3, r1
 8002906:	d101      	bne.n	800290c <I2SEx_TxRxDMACplt+0xf8>
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <I2SEx_TxRxDMACplt+0x134>)
 800290a:	e001      	b.n	8002910 <I2SEx_TxRxDMACplt+0xfc>
 800290c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002910:	f022 0202 	bic.w	r2, r2, #2
 8002914:	605a      	str	r2, [r3, #4]
			}

			hi2s->TxXferCount = 0U;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	855a      	strh	r2, [r3, #42]	; 0x2a

			if (hi2s->RxXferCount == 0U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002920:	b29b      	uxth	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d106      	bne.n	8002934 <I2SEx_TxRxDMACplt+0x120>
			{
				hi2s->State = HAL_I2S_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

				/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
				HAL_I2SEx_TxRxCpltCallback(hi2s);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7fd fed6 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
			}
		}
	}
	HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7fd fed3 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40003800 	.word	0x40003800
 8002948:	40003400 	.word	0x40003400

0800294c <I2SEx_TxRxDMAError>:
 * @brief  DMA I2S communication error callback
 * @param  hdma DMA handle
 * @retval None
 */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
	I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	60fb      	str	r3, [r7, #12]

	/* Disable Rx and Tx DMA Request */
	CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0203 	bic.w	r2, r2, #3
 8002968:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a15      	ldr	r2, [pc, #84]	; (80029c4 <I2SEx_TxRxDMAError+0x78>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <I2SEx_TxRxDMAError+0x2c>
 8002974:	4b14      	ldr	r3, [pc, #80]	; (80029c8 <I2SEx_TxRxDMAError+0x7c>)
 8002976:	e001      	b.n	800297c <I2SEx_TxRxDMAError+0x30>
 8002978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4910      	ldr	r1, [pc, #64]	; (80029c4 <I2SEx_TxRxDMAError+0x78>)
 8002984:	428b      	cmp	r3, r1
 8002986:	d101      	bne.n	800298c <I2SEx_TxRxDMAError+0x40>
 8002988:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <I2SEx_TxRxDMAError+0x7c>)
 800298a:	e001      	b.n	8002990 <I2SEx_TxRxDMAError+0x44>
 800298c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002990:	f022 0203 	bic.w	r2, r2, #3
 8002994:	605a      	str	r2, [r3, #4]

	hi2s->TxXferCount = 0U;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	855a      	strh	r2, [r3, #42]	; 0x2a
	hi2s->RxXferCount = 0U;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2200      	movs	r2, #0
 80029a0:	865a      	strh	r2, [r3, #50]	; 0x32

	hi2s->State = HAL_I2S_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	/* Set the error code and execute error callback*/
	SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ae:	f043 0208 	orr.w	r2, r3, #8
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
	/* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
	HAL_I2S_ErrorCallback(hi2s);
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fb4e 	bl	8002058 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40003800 	.word	0x40003800
 80029c8:	40003400 	.word	0x40003400

080029cc <I2SEx_TxISR_I2S>:
 * @brief  I2S Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	1c99      	adds	r1, r3, #2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6251      	str	r1, [r2, #36]	; 0x24
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a

	if (hi2s->TxXferCount == 0U)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d113      	bne.n	8002a26 <I2SEx_TxISR_I2S+0x5a>
	{
		/* Disable TXE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a0c:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d106      	bne.n	8002a26 <I2SEx_TxISR_I2S+0x5a>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002a20:	6878      	ldr	r0, [r7, #4]
 8002a22:	f7fd fe5d 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002a26:	bf00      	nop
 8002a28:	3708      	adds	r7, #8
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
	...

08002a30 <I2SEx_TxISR_I2SExt>:
 * @brief  I2SExt Full-Duplex IT handler transmit function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
	/* Write Data on DR register */
	I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	1c99      	adds	r1, r3, #2
 8002a3e:	687a      	ldr	r2, [r7, #4]
 8002a40:	6251      	str	r1, [r2, #36]	; 0x24
 8002a42:	8819      	ldrh	r1, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d101      	bne.n	8002a52 <I2SEx_TxISR_I2SExt+0x22>
 8002a4e:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a50:	e001      	b.n	8002a56 <I2SEx_TxISR_I2SExt+0x26>
 8002a52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a56:	460a      	mov	r2, r1
 8002a58:	60da      	str	r2, [r3, #12]
	hi2s->TxXferCount--;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	3b01      	subs	r3, #1
 8002a62:	b29a      	uxth	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	855a      	strh	r2, [r3, #42]	; 0x2a

	if (hi2s->TxXferCount == 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d121      	bne.n	8002ab6 <I2SEx_TxISR_I2SExt+0x86>
	{
		/* Disable I2Sext TXE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d101      	bne.n	8002a80 <I2SEx_TxISR_I2SExt+0x50>
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a7e:	e001      	b.n	8002a84 <I2SEx_TxISR_I2SExt+0x54>
 8002a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	490d      	ldr	r1, [pc, #52]	; (8002ac0 <I2SEx_TxISR_I2SExt+0x90>)
 8002a8c:	428b      	cmp	r3, r1
 8002a8e:	d101      	bne.n	8002a94 <I2SEx_TxISR_I2SExt+0x64>
 8002a90:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <I2SEx_TxISR_I2SExt+0x94>)
 8002a92:	e001      	b.n	8002a98 <I2SEx_TxISR_I2SExt+0x68>
 8002a94:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a98:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a9c:	605a      	str	r2, [r3, #4]

		if (hi2s->RxXferCount == 0U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d106      	bne.n	8002ab6 <I2SEx_TxISR_I2SExt+0x86>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f7fd fe15 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002ab6:	bf00      	nop
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40003800 	.word	0x40003800
 8002ac4:	40003400 	.word	0x40003400

08002ac8 <I2SEx_RxISR_I2S>:
 * @brief  I2S Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68d8      	ldr	r0, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ada:	1c99      	adds	r1, r3, #2
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002ae0:	b282      	uxth	r2, r0
 8002ae2:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	865a      	strh	r2, [r3, #50]	; 0x32

	if (hi2s->RxXferCount == 0U)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d113      	bne.n	8002b24 <I2SEx_RxISR_I2S+0x5c>
	{
		/* Disable RXNE and ERR interrupt */
		__HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b0a:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <I2SEx_RxISR_I2S+0x5c>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fd fdde 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002b24:	bf00      	nop
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <I2SEx_RxISR_I2SExt>:
 * @brief  I2SExt Full-Duplex IT handler receive function
 * @param  hi2s I2S handle
 * @retval None
 */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	/* Read Data from DR register */
	(*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a20      	ldr	r2, [pc, #128]	; (8002bbc <I2SEx_RxISR_I2SExt+0x90>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d101      	bne.n	8002b42 <I2SEx_RxISR_I2SExt+0x16>
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b40:	e001      	b.n	8002b46 <I2SEx_RxISR_I2SExt+0x1a>
 8002b42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b46:	68d8      	ldr	r0, [r3, #12]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4c:	1c99      	adds	r1, r3, #2
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002b52:	b282      	uxth	r2, r0
 8002b54:	801a      	strh	r2, [r3, #0]
	hi2s->RxXferCount--;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	865a      	strh	r2, [r3, #50]	; 0x32

	if (hi2s->RxXferCount == 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d121      	bne.n	8002bb2 <I2SEx_RxISR_I2SExt+0x86>
	{
		/* Disable I2Sext RXNE and ERR interrupt */
		__HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a12      	ldr	r2, [pc, #72]	; (8002bbc <I2SEx_RxISR_I2SExt+0x90>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d101      	bne.n	8002b7c <I2SEx_RxISR_I2SExt+0x50>
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b7a:	e001      	b.n	8002b80 <I2SEx_RxISR_I2SExt+0x54>
 8002b7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	490d      	ldr	r1, [pc, #52]	; (8002bbc <I2SEx_RxISR_I2SExt+0x90>)
 8002b88:	428b      	cmp	r3, r1
 8002b8a:	d101      	bne.n	8002b90 <I2SEx_RxISR_I2SExt+0x64>
 8002b8c:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <I2SEx_RxISR_I2SExt+0x94>)
 8002b8e:	e001      	b.n	8002b94 <I2SEx_RxISR_I2SExt+0x68>
 8002b90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002b94:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002b98:	605a      	str	r2, [r3, #4]

		if (hi2s->TxXferCount == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <I2SEx_RxISR_I2SExt+0x86>
		{
			hi2s->State = HAL_I2S_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
			/* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
			HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7fd fd97 	bl	80006e0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
		}
	}
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	40003800 	.word	0x40003800
 8002bc0:	40003400 	.word	0x40003400

08002bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e25b      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d075      	beq.n	8002cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002be2:	4ba3      	ldr	r3, [pc, #652]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 030c 	and.w	r3, r3, #12
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d00c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bee:	4ba0      	ldr	r3, [pc, #640]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d112      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b9d      	ldr	r3, [pc, #628]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c06:	d10b      	bne.n	8002c20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	4b99      	ldr	r3, [pc, #612]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d05b      	beq.n	8002ccc <HAL_RCC_OscConfig+0x108>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d157      	bne.n	8002ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e236      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c28:	d106      	bne.n	8002c38 <HAL_RCC_OscConfig+0x74>
 8002c2a:	4b91      	ldr	r3, [pc, #580]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a90      	ldr	r2, [pc, #576]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c34:	6013      	str	r3, [r2, #0]
 8002c36:	e01d      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c40:	d10c      	bne.n	8002c5c <HAL_RCC_OscConfig+0x98>
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a8a      	ldr	r2, [pc, #552]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c4c:	6013      	str	r3, [r2, #0]
 8002c4e:	4b88      	ldr	r3, [pc, #544]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a87      	ldr	r2, [pc, #540]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	e00b      	b.n	8002c74 <HAL_RCC_OscConfig+0xb0>
 8002c5c:	4b84      	ldr	r3, [pc, #528]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a83      	ldr	r2, [pc, #524]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d013      	beq.n	8002ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fa30 	bl	80010e0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c84:	f7fe fa2c 	bl	80010e0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b64      	cmp	r3, #100	; 0x64
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1fb      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c96:	4b76      	ldr	r3, [pc, #472]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0xc0>
 8002ca2:	e014      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe fa1c 	bl	80010e0 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cac:	f7fe fa18 	bl	80010e0 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b64      	cmp	r3, #100	; 0x64
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e1e7      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cbe:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0xe8>
 8002cca:	e000      	b.n	8002cce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d063      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 030c 	and.w	r3, r3, #12
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00b      	beq.n	8002cfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ce6:	4b62      	ldr	r3, [pc, #392]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002cee:	2b08      	cmp	r3, #8
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b5f      	ldr	r3, [pc, #380]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d116      	bne.n	8002d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cfe:	4b5c      	ldr	r3, [pc, #368]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d005      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d001      	beq.n	8002d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e1bb      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d16:	4b56      	ldr	r3, [pc, #344]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	4952      	ldr	r1, [pc, #328]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	e03a      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d020      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d34:	4b4f      	ldr	r3, [pc, #316]	; (8002e74 <HAL_RCC_OscConfig+0x2b0>)
 8002d36:	2201      	movs	r2, #1
 8002d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fe f9d1 	bl	80010e0 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d40:	e008      	b.n	8002d54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d42:	f7fe f9cd 	bl	80010e0 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d901      	bls.n	8002d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e19c      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d54:	4b46      	ldr	r3, [pc, #280]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0302 	and.w	r3, r3, #2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d0f0      	beq.n	8002d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d60:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	4940      	ldr	r1, [pc, #256]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	600b      	str	r3, [r1, #0]
 8002d74:	e015      	b.n	8002da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d76:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCC_OscConfig+0x2b0>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d7c:	f7fe f9b0 	bl	80010e0 <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d84:	f7fe f9ac 	bl	80010e0 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e17b      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d96:	4b36      	ldr	r3, [pc, #216]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0308 	and.w	r3, r3, #8
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d030      	beq.n	8002e10 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <HAL_RCC_OscConfig+0x2b4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dbc:	f7fe f990 	bl	80010e0 <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002dc4:	f7fe f98c 	bl	80010e0 <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e15b      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dd6:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002dd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0x200>
 8002de2:	e015      	b.n	8002e10 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de4:	4b24      	ldr	r3, [pc, #144]	; (8002e78 <HAL_RCC_OscConfig+0x2b4>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dea:	f7fe f979 	bl	80010e0 <HAL_GetTick>
 8002dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df0:	e008      	b.n	8002e04 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df2:	f7fe f975 	bl	80010e0 <HAL_GetTick>
 8002df6:	4602      	mov	r2, r0
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1ad3      	subs	r3, r2, r3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d901      	bls.n	8002e04 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e144      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e04:	4b1a      	ldr	r3, [pc, #104]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f0      	bne.n	8002df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80a0 	beq.w	8002f5e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e22:	4b13      	ldr	r3, [pc, #76]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10f      	bne.n	8002e4e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e2e:	2300      	movs	r3, #0
 8002e30:	60bb      	str	r3, [r7, #8]
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_RCC_OscConfig+0x2ac>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	60bb      	str	r3, [r7, #8]
 8002e48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <HAL_RCC_OscConfig+0x2b8>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d121      	bne.n	8002e9e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e5a:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <HAL_RCC_OscConfig+0x2b8>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a07      	ldr	r2, [pc, #28]	; (8002e7c <HAL_RCC_OscConfig+0x2b8>)
 8002e60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e66:	f7fe f93b 	bl	80010e0 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e6c:	e011      	b.n	8002e92 <HAL_RCC_OscConfig+0x2ce>
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800
 8002e74:	42470000 	.word	0x42470000
 8002e78:	42470e80 	.word	0x42470e80
 8002e7c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e80:	f7fe f92e 	bl	80010e0 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e0fd      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b81      	ldr	r3, [pc, #516]	; (8003098 <HAL_RCC_OscConfig+0x4d4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d0f0      	beq.n	8002e80 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d106      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x2f0>
 8002ea6:	4b7d      	ldr	r3, [pc, #500]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a7c      	ldr	r2, [pc, #496]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002eac:	f043 0301 	orr.w	r3, r3, #1
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
 8002eb2:	e01c      	b.n	8002eee <HAL_RCC_OscConfig+0x32a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	2b05      	cmp	r3, #5
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x312>
 8002ebc:	4b77      	ldr	r3, [pc, #476]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec0:	4a76      	ldr	r2, [pc, #472]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ec2:	f043 0304 	orr.w	r3, r3, #4
 8002ec6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ec8:	4b74      	ldr	r3, [pc, #464]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ecc:	4a73      	ldr	r2, [pc, #460]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ed4:	e00b      	b.n	8002eee <HAL_RCC_OscConfig+0x32a>
 8002ed6:	4b71      	ldr	r3, [pc, #452]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a70      	ldr	r2, [pc, #448]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	4b6e      	ldr	r3, [pc, #440]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	4a6d      	ldr	r2, [pc, #436]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ee8:	f023 0304 	bic.w	r3, r3, #4
 8002eec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d015      	beq.n	8002f22 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef6:	f7fe f8f3 	bl	80010e0 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efc:	e00a      	b.n	8002f14 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fe f8ef 	bl	80010e0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e0bc      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f14:	4b61      	ldr	r3, [pc, #388]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0ee      	beq.n	8002efe <HAL_RCC_OscConfig+0x33a>
 8002f20:	e014      	b.n	8002f4c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f22:	f7fe f8dd 	bl	80010e0 <HAL_GetTick>
 8002f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f28:	e00a      	b.n	8002f40 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2a:	f7fe f8d9 	bl	80010e0 <HAL_GetTick>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	1ad3      	subs	r3, r2, r3
 8002f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e0a6      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f40:	4b56      	ldr	r3, [pc, #344]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1ee      	bne.n	8002f2a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d105      	bne.n	8002f5e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f52:	4b52      	ldr	r3, [pc, #328]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a51      	ldr	r2, [pc, #324]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8092 	beq.w	800308c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f68:	4b4c      	ldr	r3, [pc, #304]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f003 030c 	and.w	r3, r3, #12
 8002f70:	2b08      	cmp	r3, #8
 8002f72:	d05c      	beq.n	800302e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d141      	bne.n	8003000 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7c:	4b48      	ldr	r3, [pc, #288]	; (80030a0 <HAL_RCC_OscConfig+0x4dc>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f82:	f7fe f8ad 	bl	80010e0 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f8a:	f7fe f8a9 	bl	80010e0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e078      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9c:	4b3f      	ldr	r3, [pc, #252]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69da      	ldr	r2, [r3, #28]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a1b      	ldr	r3, [r3, #32]
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	019b      	lsls	r3, r3, #6
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	041b      	lsls	r3, r3, #16
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fca:	061b      	lsls	r3, r3, #24
 8002fcc:	4933      	ldr	r1, [pc, #204]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd2:	4b33      	ldr	r3, [pc, #204]	; (80030a0 <HAL_RCC_OscConfig+0x4dc>)
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd8:	f7fe f882 	bl	80010e0 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fe0:	f7fe f87e 	bl	80010e0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e04d      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff2:	4b2a      	ldr	r3, [pc, #168]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d0f0      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x41c>
 8002ffe:	e045      	b.n	800308c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003000:	4b27      	ldr	r3, [pc, #156]	; (80030a0 <HAL_RCC_OscConfig+0x4dc>)
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003006:	f7fe f86b 	bl	80010e0 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800300e:	f7fe f867 	bl	80010e0 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e036      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003020:	4b1e      	ldr	r3, [pc, #120]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x44a>
 800302c:	e02e      	b.n	800308c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d101      	bne.n	800303a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e029      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800303a:	4b18      	ldr	r3, [pc, #96]	; (800309c <HAL_RCC_OscConfig+0x4d8>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	429a      	cmp	r2, r3
 800304c:	d11c      	bne.n	8003088 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003058:	429a      	cmp	r2, r3
 800305a:	d115      	bne.n	8003088 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003062:	4013      	ands	r3, r2
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003068:	4293      	cmp	r3, r2
 800306a:	d10d      	bne.n	8003088 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003076:	429a      	cmp	r2, r3
 8003078:	d106      	bne.n	8003088 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003084:	429a      	cmp	r2, r3
 8003086:	d001      	beq.n	800308c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	40007000 	.word	0x40007000
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470060 	.word	0x42470060

080030a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e0cc      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 030f 	and.w	r3, r3, #15
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d90c      	bls.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b65      	ldr	r3, [pc, #404]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ce:	4b63      	ldr	r3, [pc, #396]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 030f 	and.w	r3, r3, #15
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d001      	beq.n	80030e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0b8      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0302 	and.w	r3, r3, #2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d020      	beq.n	800312e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0304 	and.w	r3, r3, #4
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80030f8:	4b59      	ldr	r3, [pc, #356]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	4a58      	ldr	r2, [pc, #352]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80030fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003110:	4b53      	ldr	r3, [pc, #332]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	4a52      	ldr	r2, [pc, #328]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800311a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	494d      	ldr	r1, [pc, #308]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d044      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d107      	bne.n	8003152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003142:	4b47      	ldr	r3, [pc, #284]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d119      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e07f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d003      	beq.n	8003162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	d107      	bne.n	8003172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003162:	4b3f      	ldr	r3, [pc, #252]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d109      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e06f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003172:	4b3b      	ldr	r3, [pc, #236]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e067      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003182:	4b37      	ldr	r3, [pc, #220]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f023 0203 	bic.w	r2, r3, #3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4934      	ldr	r1, [pc, #208]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003190:	4313      	orrs	r3, r2
 8003192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003194:	f7fd ffa4 	bl	80010e0 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800319a:	e00a      	b.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800319c:	f7fd ffa0 	bl	80010e0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e04f      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031b2:	4b2b      	ldr	r3, [pc, #172]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f003 020c 	and.w	r2, r3, #12
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d1eb      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d20c      	bcs.n	80031ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b22      	ldr	r3, [pc, #136]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b20      	ldr	r3, [pc, #128]	; (800325c <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e032      	b.n	8003252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0304 	and.w	r3, r3, #4
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	4916      	ldr	r1, [pc, #88]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	4313      	orrs	r3, r2
 8003208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	2b00      	cmp	r3, #0
 8003214:	d009      	beq.n	800322a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003216:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	490e      	ldr	r1, [pc, #56]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003226:	4313      	orrs	r3, r2
 8003228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800322a:	f000 f821 	bl	8003270 <HAL_RCC_GetSysClockFreq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCC_ClockConfig+0x1bc>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	490a      	ldr	r1, [pc, #40]	; (8003264 <HAL_RCC_ClockConfig+0x1c0>)
 800323c:	5ccb      	ldrb	r3, [r1, r3]
 800323e:	fa22 f303 	lsr.w	r3, r2, r3
 8003242:	4a09      	ldr	r2, [pc, #36]	; (8003268 <HAL_RCC_ClockConfig+0x1c4>)
 8003244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003246:	4b09      	ldr	r3, [pc, #36]	; (800326c <HAL_RCC_ClockConfig+0x1c8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd ff04 	bl	8001058 <HAL_InitTick>

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40023c00 	.word	0x40023c00
 8003260:	40023800 	.word	0x40023800
 8003264:	08003724 	.word	0x08003724
 8003268:	20000000 	.word	0x20000000
 800326c:	20000004 	.word	0x20000004

08003270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003274:	b084      	sub	sp, #16
 8003276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	607b      	str	r3, [r7, #4]
 800327c:	2300      	movs	r3, #0
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	2300      	movs	r3, #0
 8003282:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003284:	2300      	movs	r3, #0
 8003286:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003288:	4b67      	ldr	r3, [pc, #412]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f003 030c 	and.w	r3, r3, #12
 8003290:	2b08      	cmp	r3, #8
 8003292:	d00d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003294:	2b08      	cmp	r3, #8
 8003296:	f200 80bd 	bhi.w	8003414 <HAL_RCC_GetSysClockFreq+0x1a4>
 800329a:	2b00      	cmp	r3, #0
 800329c:	d002      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x34>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d003      	beq.n	80032aa <HAL_RCC_GetSysClockFreq+0x3a>
 80032a2:	e0b7      	b.n	8003414 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032a4:	4b61      	ldr	r3, [pc, #388]	; (800342c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80032a6:	60bb      	str	r3, [r7, #8]
       break;
 80032a8:	e0b7      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032aa:	4b61      	ldr	r3, [pc, #388]	; (8003430 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80032ac:	60bb      	str	r3, [r7, #8]
      break;
 80032ae:	e0b4      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032b0:	4b5d      	ldr	r3, [pc, #372]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ba:	4b5b      	ldr	r3, [pc, #364]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d04d      	beq.n	8003362 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c6:	4b58      	ldr	r3, [pc, #352]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	099b      	lsrs	r3, r3, #6
 80032cc:	461a      	mov	r2, r3
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032d6:	f04f 0100 	mov.w	r1, #0
 80032da:	ea02 0800 	and.w	r8, r2, r0
 80032de:	ea03 0901 	and.w	r9, r3, r1
 80032e2:	4640      	mov	r0, r8
 80032e4:	4649      	mov	r1, r9
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	014b      	lsls	r3, r1, #5
 80032f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032f4:	0142      	lsls	r2, r0, #5
 80032f6:	4610      	mov	r0, r2
 80032f8:	4619      	mov	r1, r3
 80032fa:	ebb0 0008 	subs.w	r0, r0, r8
 80032fe:	eb61 0109 	sbc.w	r1, r1, r9
 8003302:	f04f 0200 	mov.w	r2, #0
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	018b      	lsls	r3, r1, #6
 800330c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003310:	0182      	lsls	r2, r0, #6
 8003312:	1a12      	subs	r2, r2, r0
 8003314:	eb63 0301 	sbc.w	r3, r3, r1
 8003318:	f04f 0000 	mov.w	r0, #0
 800331c:	f04f 0100 	mov.w	r1, #0
 8003320:	00d9      	lsls	r1, r3, #3
 8003322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003326:	00d0      	lsls	r0, r2, #3
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	eb12 0208 	adds.w	r2, r2, r8
 8003330:	eb43 0309 	adc.w	r3, r3, r9
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	0259      	lsls	r1, r3, #9
 800333e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003342:	0250      	lsls	r0, r2, #9
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	461a      	mov	r2, r3
 8003350:	f04f 0300 	mov.w	r3, #0
 8003354:	f7fc ff38 	bl	80001c8 <__aeabi_uldivmod>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4613      	mov	r3, r2
 800335e:	60fb      	str	r3, [r7, #12]
 8003360:	e04a      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003362:	4b31      	ldr	r3, [pc, #196]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	461a      	mov	r2, r3
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003372:	f04f 0100 	mov.w	r1, #0
 8003376:	ea02 0400 	and.w	r4, r2, r0
 800337a:	ea03 0501 	and.w	r5, r3, r1
 800337e:	4620      	mov	r0, r4
 8003380:	4629      	mov	r1, r5
 8003382:	f04f 0200 	mov.w	r2, #0
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	014b      	lsls	r3, r1, #5
 800338c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003390:	0142      	lsls	r2, r0, #5
 8003392:	4610      	mov	r0, r2
 8003394:	4619      	mov	r1, r3
 8003396:	1b00      	subs	r0, r0, r4
 8003398:	eb61 0105 	sbc.w	r1, r1, r5
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	018b      	lsls	r3, r1, #6
 80033a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033aa:	0182      	lsls	r2, r0, #6
 80033ac:	1a12      	subs	r2, r2, r0
 80033ae:	eb63 0301 	sbc.w	r3, r3, r1
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f04f 0100 	mov.w	r1, #0
 80033ba:	00d9      	lsls	r1, r3, #3
 80033bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033c0:	00d0      	lsls	r0, r2, #3
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	1912      	adds	r2, r2, r4
 80033c8:	eb45 0303 	adc.w	r3, r5, r3
 80033cc:	f04f 0000 	mov.w	r0, #0
 80033d0:	f04f 0100 	mov.w	r1, #0
 80033d4:	0299      	lsls	r1, r3, #10
 80033d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033da:	0290      	lsls	r0, r2, #10
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	f7fc feec 	bl	80001c8 <__aeabi_uldivmod>
 80033f0:	4602      	mov	r2, r0
 80033f2:	460b      	mov	r3, r1
 80033f4:	4613      	mov	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f8:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	f003 0303 	and.w	r3, r3, #3
 8003402:	3301      	adds	r3, #1
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003410:	60bb      	str	r3, [r7, #8]
      break;
 8003412:	e002      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003414:	4b05      	ldr	r3, [pc, #20]	; (800342c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003416:	60bb      	str	r3, [r7, #8]
      break;
 8003418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800341a:	68bb      	ldr	r3, [r7, #8]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	00f42400 	.word	0x00f42400
 8003430:	007a1200 	.word	0x007a1200

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d105      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003458:	2b00      	cmp	r3, #0
 800345a:	d035      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800345c:	4b62      	ldr	r3, [pc, #392]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003462:	f7fd fe3d 	bl	80010e0 <HAL_GetTick>
 8003466:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003468:	e008      	b.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800346a:	f7fd fe39 	bl	80010e0 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e0b0      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800347c:	4b5b      	ldr	r3, [pc, #364]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	019a      	lsls	r2, r3, #6
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	071b      	lsls	r3, r3, #28
 8003494:	4955      	ldr	r1, [pc, #340]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800349c:	4b52      	ldr	r3, [pc, #328]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80034a2:	f7fd fe1d 	bl	80010e0 <HAL_GetTick>
 80034a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034a8:	e008      	b.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80034aa:	f7fd fe19 	bl	80010e0 <HAL_GetTick>
 80034ae:	4602      	mov	r2, r0
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d901      	bls.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e090      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034bc:	4b4b      	ldr	r3, [pc, #300]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0f0      	beq.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0302 	and.w	r3, r3, #2
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f000 8083 	beq.w	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4b44      	ldr	r3, [pc, #272]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	4a43      	ldr	r2, [pc, #268]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b41      	ldr	r3, [pc, #260]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80034f2:	4b3f      	ldr	r3, [pc, #252]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3e      	ldr	r2, [pc, #248]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80034f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034fe:	f7fd fdef 	bl	80010e0 <HAL_GetTick>
 8003502:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003504:	e008      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003506:	f7fd fdeb 	bl	80010e0 <HAL_GetTick>
 800350a:	4602      	mov	r2, r0
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	1ad3      	subs	r3, r2, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d901      	bls.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e062      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d0f0      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003524:	4b31      	ldr	r3, [pc, #196]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800352c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02f      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353c:	693a      	ldr	r2, [r7, #16]
 800353e:	429a      	cmp	r2, r3
 8003540:	d028      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003542:	4b2a      	ldr	r3, [pc, #168]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800354c:	4b29      	ldr	r3, [pc, #164]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800354e:	2201      	movs	r2, #1
 8003550:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003552:	4b28      	ldr	r3, [pc, #160]	; (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003558:	4a24      	ldr	r2, [pc, #144]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b01      	cmp	r3, #1
 8003568:	d114      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800356a:	f7fd fdb9 	bl	80010e0 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00a      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fd fdb5 	bl	80010e0 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003580:	4293      	cmp	r3, r2
 8003582:	d901      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e02a      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003588:	4b18      	ldr	r3, [pc, #96]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800358a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0ee      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035a0:	d10d      	bne.n	80035be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80035a2:	4b12      	ldr	r3, [pc, #72]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80035b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035b6:	490d      	ldr	r1, [pc, #52]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	608b      	str	r3, [r1, #8]
 80035bc:	e005      	b.n	80035ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035be:	4b0b      	ldr	r3, [pc, #44]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035c4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80035c8:	6093      	str	r3, [r2, #8]
 80035ca:	4b08      	ldr	r3, [pc, #32]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035cc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035d6:	4905      	ldr	r1, [pc, #20]	; (80035ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	42470068 	.word	0x42470068
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40007000 	.word	0x40007000
 80035f4:	42470e40 	.word	0x42470e40

080035f8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800360c:	2300      	movs	r3, #0
 800360e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b01      	cmp	r3, #1
 8003614:	d13e      	bne.n	8003694 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800361e:	60fb      	str	r3, [r7, #12]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d005      	beq.n	8003632 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d12f      	bne.n	800368c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800362c:	4b1e      	ldr	r3, [pc, #120]	; (80036a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800362e:	617b      	str	r3, [r7, #20]
          break;
 8003630:	e02f      	b.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003632:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800363a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800363e:	d108      	bne.n	8003652 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003640:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003648:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800364a:	fbb2 f3f3 	udiv	r3, r2, r3
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	e007      	b.n	8003662 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003652:	4b14      	ldr	r3, [pc, #80]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800365a:	4a15      	ldr	r2, [pc, #84]	; (80036b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003662:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003668:	099b      	lsrs	r3, r3, #6
 800366a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	fb02 f303 	mul.w	r3, r2, r3
 8003674:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800367c:	0f1b      	lsrs	r3, r3, #28
 800367e:	f003 0307 	and.w	r3, r3, #7
 8003682:	68ba      	ldr	r2, [r7, #8]
 8003684:	fbb2 f3f3 	udiv	r3, r2, r3
 8003688:	617b      	str	r3, [r7, #20]
          break;
 800368a:	e002      	b.n	8003692 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
          break;
 8003690:	bf00      	nop
        }
      }
      break;
 8003692:	bf00      	nop
    }
  }
  return frequency;
 8003694:	697b      	ldr	r3, [r7, #20]
}
 8003696:	4618      	mov	r0, r3
 8003698:	371c      	adds	r7, #28
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	00bb8000 	.word	0x00bb8000
 80036ac:	007a1200 	.word	0x007a1200
 80036b0:	00f42400 	.word	0x00f42400

080036b4 <__libc_init_array>:
 80036b4:	b570      	push	{r4, r5, r6, lr}
 80036b6:	4d0d      	ldr	r5, [pc, #52]	; (80036ec <__libc_init_array+0x38>)
 80036b8:	4c0d      	ldr	r4, [pc, #52]	; (80036f0 <__libc_init_array+0x3c>)
 80036ba:	1b64      	subs	r4, r4, r5
 80036bc:	10a4      	asrs	r4, r4, #2
 80036be:	2600      	movs	r6, #0
 80036c0:	42a6      	cmp	r6, r4
 80036c2:	d109      	bne.n	80036d8 <__libc_init_array+0x24>
 80036c4:	4d0b      	ldr	r5, [pc, #44]	; (80036f4 <__libc_init_array+0x40>)
 80036c6:	4c0c      	ldr	r4, [pc, #48]	; (80036f8 <__libc_init_array+0x44>)
 80036c8:	f000 f820 	bl	800370c <_init>
 80036cc:	1b64      	subs	r4, r4, r5
 80036ce:	10a4      	asrs	r4, r4, #2
 80036d0:	2600      	movs	r6, #0
 80036d2:	42a6      	cmp	r6, r4
 80036d4:	d105      	bne.n	80036e2 <__libc_init_array+0x2e>
 80036d6:	bd70      	pop	{r4, r5, r6, pc}
 80036d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80036dc:	4798      	blx	r3
 80036de:	3601      	adds	r6, #1
 80036e0:	e7ee      	b.n	80036c0 <__libc_init_array+0xc>
 80036e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e6:	4798      	blx	r3
 80036e8:	3601      	adds	r6, #1
 80036ea:	e7f2      	b.n	80036d2 <__libc_init_array+0x1e>
 80036ec:	08003744 	.word	0x08003744
 80036f0:	08003744 	.word	0x08003744
 80036f4:	08003744 	.word	0x08003744
 80036f8:	08003748 	.word	0x08003748

080036fc <memset>:
 80036fc:	4402      	add	r2, r0
 80036fe:	4603      	mov	r3, r0
 8003700:	4293      	cmp	r3, r2
 8003702:	d100      	bne.n	8003706 <memset+0xa>
 8003704:	4770      	bx	lr
 8003706:	f803 1b01 	strb.w	r1, [r3], #1
 800370a:	e7f9      	b.n	8003700 <memset+0x4>

0800370c <_init>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	bf00      	nop
 8003710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003712:	bc08      	pop	{r3}
 8003714:	469e      	mov	lr, r3
 8003716:	4770      	bx	lr

08003718 <_fini>:
 8003718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371a:	bf00      	nop
 800371c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371e:	bc08      	pop	{r3}
 8003720:	469e      	mov	lr, r3
 8003722:	4770      	bx	lr
